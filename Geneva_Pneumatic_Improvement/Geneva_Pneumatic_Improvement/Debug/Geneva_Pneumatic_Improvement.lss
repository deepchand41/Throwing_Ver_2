
Geneva_Pneumatic_Improvement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001ef6  00001f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00800202  00800202  00001f8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035e9  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d57  00000000  00000000  00005905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb6  00000000  00000000  0000665c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00008214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ec  00000000  00000000  00008b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002716  00000000  00000000  00009f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000c66e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_1>
       8:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_2>
       c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_3>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_5>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d3 c0       	rjmp	.+422    	; 0x1d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d1 c0       	rjmp	.+418    	; 0x1d4 <__bad_interrupt>
      32:	00 00       	nop
      34:	cf c0       	rjmp	.+414    	; 0x1d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	cd c0       	rjmp	.+410    	; 0x1d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c2       	rjmp	.+1092   	; 0x482 <__vector_15>
      3e:	00 00       	nop
      40:	c9 c0       	rjmp	.+402    	; 0x1d4 <__bad_interrupt>
      42:	00 00       	nop
      44:	c7 c0       	rjmp	.+398    	; 0x1d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	c5 c0       	rjmp	.+394    	; 0x1d4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c1 c0       	rjmp	.+386    	; 0x1d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_21>
      58:	bd c0       	rjmp	.+378    	; 0x1d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c0       	rjmp	.+374    	; 0x1d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b9 c0       	rjmp	.+370    	; 0x1d4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_25>
      68:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_26>
      6c:	b3 c0       	rjmp	.+358    	; 0x1d4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b1 c0       	rjmp	.+354    	; 0x1d4 <__bad_interrupt>
      72:	00 00       	nop
      74:	af c0       	rjmp	.+350    	; 0x1d4 <__bad_interrupt>
      76:	00 00       	nop
      78:	ad c0       	rjmp	.+346    	; 0x1d4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ab c0       	rjmp	.+342    	; 0x1d4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a9 c0       	rjmp	.+338    	; 0x1d4 <__bad_interrupt>
      82:	00 00       	nop
      84:	a7 c0       	rjmp	.+334    	; 0x1d4 <__bad_interrupt>
      86:	00 00       	nop
      88:	a5 c0       	rjmp	.+330    	; 0x1d4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 c0       	rjmp	.+326    	; 0x1d4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a1 c0       	rjmp	.+322    	; 0x1d4 <__bad_interrupt>
      92:	00 00       	nop
      94:	9f c0       	rjmp	.+318    	; 0x1d4 <__bad_interrupt>
      96:	00 00       	nop
      98:	9d c0       	rjmp	.+314    	; 0x1d4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9b c0       	rjmp	.+310    	; 0x1d4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	99 c0       	rjmp	.+306    	; 0x1d4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	97 c0       	rjmp	.+302    	; 0x1d4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	95 c0       	rjmp	.+298    	; 0x1d4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	93 c0       	rjmp	.+294    	; 0x1d4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	91 c0       	rjmp	.+290    	; 0x1d4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8f c0       	rjmp	.+286    	; 0x1d4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8d c0       	rjmp	.+282    	; 0x1d4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8b c0       	rjmp	.+278    	; 0x1d4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	89 c0       	rjmp	.+274    	; 0x1d4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	87 c0       	rjmp	.+270    	; 0x1d4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	85 c0       	rjmp	.+266    	; 0x1d4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_51>
      d0:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_52>
      d4:	7f c0       	rjmp	.+254    	; 0x1d4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__vector_54>
      dc:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_55>
      e0:	79 c0       	rjmp	.+242    	; 0x1d4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 04       	cpc	r9, r6
      e6:	c1 04       	cpc	r12, r1
      e8:	38 05       	cpc	r19, r8
      ea:	4f 05       	cpc	r20, r15
      ec:	4f 05       	cpc	r20, r15
      ee:	4f 05       	cpc	r20, r15
      f0:	4f 05       	cpc	r20, r15
      f2:	4f 05       	cpc	r20, r15
      f4:	4f 05       	cpc	r20, r15
      f6:	4f 05       	cpc	r20, r15
      f8:	4f 05       	cpc	r20, r15
      fa:	4f 05       	cpc	r20, r15
      fc:	4f 05       	cpc	r20, r15
      fe:	4f 05       	cpc	r20, r15
     100:	4f 05       	cpc	r20, r15
     102:	4f 05       	cpc	r20, r15
     104:	4f 05       	cpc	r20, r15
     106:	4f 05       	cpc	r20, r15
     108:	4f 05       	cpc	r20, r15
     10a:	4f 05       	cpc	r20, r15
     10c:	4f 05       	cpc	r20, r15
     10e:	4f 05       	cpc	r20, r15
     110:	4f 05       	cpc	r20, r15
     112:	4f 05       	cpc	r20, r15
     114:	4f 05       	cpc	r20, r15
     116:	4f 05       	cpc	r20, r15
     118:	4f 05       	cpc	r20, r15
     11a:	4f 05       	cpc	r20, r15
     11c:	4f 05       	cpc	r20, r15
     11e:	4f 05       	cpc	r20, r15
     120:	4f 05       	cpc	r20, r15
     122:	4f 05       	cpc	r20, r15
     124:	4f 05       	cpc	r20, r15
     126:	4f 05       	cpc	r20, r15
     128:	4f 05       	cpc	r20, r15
     12a:	4f 05       	cpc	r20, r15
     12c:	4f 05       	cpc	r20, r15
     12e:	4f 05       	cpc	r20, r15
     130:	4f 05       	cpc	r20, r15
     132:	4f 05       	cpc	r20, r15
     134:	4f 05       	cpc	r20, r15
     136:	4f 05       	cpc	r20, r15
     138:	4f 05       	cpc	r20, r15
     13a:	4f 05       	cpc	r20, r15
     13c:	4f 05       	cpc	r20, r15
     13e:	4f 05       	cpc	r20, r15
     140:	4f 05       	cpc	r20, r15
     142:	4f 05       	cpc	r20, r15
     144:	4f 05       	cpc	r20, r15
     146:	4f 05       	cpc	r20, r15
     148:	4f 05       	cpc	r20, r15
     14a:	4f 05       	cpc	r20, r15
     14c:	4f 05       	cpc	r20, r15
     14e:	4f 05       	cpc	r20, r15
     150:	4f 05       	cpc	r20, r15
     152:	02 05       	cpc	r16, r2
     154:	4f 05       	cpc	r20, r15
     156:	23 05       	cpc	r18, r3
     158:	93 04       	cpc	r9, r3
     15a:	4f 05       	cpc	r20, r15
     15c:	32 05       	cpc	r19, r2
     15e:	2c 05       	cpc	r18, r12
     160:	1f 05       	cpc	r17, r15
     162:	4f 05       	cpc	r20, r15
     164:	4f 05       	cpc	r20, r15
     166:	1d 05       	cpc	r17, r13
     168:	ec 04       	cpc	r14, r12
     16a:	4f 05       	cpc	r20, r15
     16c:	4f 05       	cpc	r20, r15
     16e:	4f 05       	cpc	r20, r15
     170:	48 05       	cpc	r20, r8

00000172 <__ctors_start>:
     172:	99 0a       	sbc	r9, r25

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d1 e2       	ldi	r29, 0x21	; 33
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0c bf       	out	0x3c, r16	; 60

00000184 <__do_copy_data>:
     184:	12 e0       	ldi	r17, 0x02	; 2
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	e6 ef       	ldi	r30, 0xF6	; 246
     18c:	fe e1       	ldi	r31, 0x1E	; 30
     18e:	00 e0       	ldi	r16, 0x00	; 0
     190:	0b bf       	out	0x3b, r16	; 59
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
     194:	07 90       	elpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a2 30       	cpi	r26, 0x02	; 2
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
     19e:	23 e0       	ldi	r18, 0x03	; 3
     1a0:	a2 e0       	ldi	r26, 0x02	; 2
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	a0 3c       	cpi	r26, 0xC0	; 192
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>

000001ae <__do_global_ctors>:
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	ca eb       	ldi	r28, 0xBA	; 186
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <__do_global_ctors+0x16>
     1b8:	21 97       	sbiw	r28, 0x01	; 1
     1ba:	01 09       	sbc	r16, r1
     1bc:	80 2f       	mov	r24, r16
     1be:	fe 01       	movw	r30, r28
     1c0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__tablejump2__>
     1c4:	c9 3b       	cpi	r28, 0xB9	; 185
     1c6:	d1 07       	cpc	r29, r17
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 07       	cpc	r16, r24
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__do_global_ctors+0xa>
     1ce:	b9 d2       	rcall	.+1394   	; 0x742 <main>
     1d0:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_exit>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <_ZN7EncoderC1Ev>:
{
	return Encoder_rpm;
}

void Encoder::Encoder_Increase_Angle_Counter(void)
{
     1d6:	fc 01       	movw	r30, r24
     1d8:	16 8a       	std	Z+22, r1	; 0x16
     1da:	17 8a       	std	Z+23, r1	; 0x17
     1dc:	10 8e       	std	Z+24, r1	; 0x18
     1de:	11 8e       	std	Z+25, r1	; 0x19
     1e0:	17 8e       	std	Z+31, r1	; 0x1f
     1e2:	16 8e       	std	Z+30, r1	; 0x1e
     1e4:	11 82       	std	Z+1, r1	; 0x01
     1e6:	10 82       	st	Z, r1
     1e8:	11 a2       	std	Z+33, r1	; 0x21
     1ea:	10 a2       	std	Z+32, r1	; 0x20
     1ec:	13 a2       	std	Z+35, r1	; 0x23
     1ee:	12 a2       	std	Z+34, r1	; 0x22
     1f0:	08 95       	ret

000001f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>:
     1f2:	85 b5       	in	r24, 0x25	; 37
     1f4:	85 60       	ori	r24, 0x05	; 5
     1f6:	85 bd       	out	0x25, r24	; 37
     1f8:	8b e9       	ldi	r24, 0x9B	; 155
     1fa:	87 bd       	out	0x27, r24	; 39
     1fc:	ee e6       	ldi	r30, 0x6E	; 110
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	82 60       	ori	r24, 0x02	; 2
     204:	80 83       	st	Z, r24
     206:	a9 9a       	sbi	0x15, 1	; 21
     208:	16 bc       	out	0x26, r1	; 38
     20a:	08 95       	ret

0000020c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>:
     20c:	e9 e6       	ldi	r30, 0x69	; 105
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	82 60       	ori	r24, 0x02	; 2
     214:	80 83       	st	Z, r24
     216:	e8 9a       	sbi	0x1d, 0	; 29
     218:	e0 9a       	sbi	0x1c, 0	; 28
     21a:	08 95       	ret

0000021c <_ZN7Encoder18Encoder_InitializeEv>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	50 98       	cbi	0x0a, 0	; 10
     224:	08 98       	cbi	0x01, 0	; 1
     226:	f2 df       	rcall	.-28     	; 0x20c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>
     228:	ce 01       	movw	r24, r28
     22a:	e3 df       	rcall	.-58     	; 0x1f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>:
     232:	fc 01       	movw	r30, r24
     234:	00 9b       	sbis	0x00, 0	; 0
     236:	1c c0       	rjmp	.+56     	; 0x270 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x3e>
     238:	86 89       	ldd	r24, Z+22	; 0x16
     23a:	97 89       	ldd	r25, Z+23	; 0x17
     23c:	a0 8d       	ldd	r26, Z+24	; 0x18
     23e:	b1 8d       	ldd	r27, Z+25	; 0x19
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	a1 09       	sbc	r26, r1
     244:	b1 09       	sbc	r27, r1
     246:	86 8b       	std	Z+22, r24	; 0x16
     248:	97 8b       	std	Z+23, r25	; 0x17
     24a:	a0 8f       	std	Z+24, r26	; 0x18
     24c:	b1 8f       	std	Z+25, r27	; 0x19
     24e:	82 8d       	ldd	r24, Z+26	; 0x1a
     250:	93 8d       	ldd	r25, Z+27	; 0x1b
     252:	a4 8d       	ldd	r26, Z+28	; 0x1c
     254:	b5 8d       	ldd	r27, Z+29	; 0x1d
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	82 8f       	std	Z+26, r24	; 0x1a
     25e:	93 8f       	std	Z+27, r25	; 0x1b
     260:	a4 8f       	std	Z+28, r26	; 0x1c
     262:	b5 8f       	std	Z+29, r27	; 0x1d
     264:	86 8d       	ldd	r24, Z+30	; 0x1e
     266:	97 8d       	ldd	r25, Z+31	; 0x1f
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	97 8f       	std	Z+31, r25	; 0x1f
     26c:	86 8f       	std	Z+30, r24	; 0x1e
     26e:	08 95       	ret
     270:	00 99       	sbic	0x00, 0	; 0
     272:	1b c0       	rjmp	.+54     	; 0x2aa <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x78>
     274:	86 89       	ldd	r24, Z+22	; 0x16
     276:	97 89       	ldd	r25, Z+23	; 0x17
     278:	a0 8d       	ldd	r26, Z+24	; 0x18
     27a:	b1 8d       	ldd	r27, Z+25	; 0x19
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	86 8b       	std	Z+22, r24	; 0x16
     284:	97 8b       	std	Z+23, r25	; 0x17
     286:	a0 8f       	std	Z+24, r26	; 0x18
     288:	b1 8f       	std	Z+25, r27	; 0x19
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	93 8d       	ldd	r25, Z+27	; 0x1b
     28e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     290:	b5 8d       	ldd	r27, Z+29	; 0x1d
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	82 8f       	std	Z+26, r24	; 0x1a
     29a:	93 8f       	std	Z+27, r25	; 0x1b
     29c:	a4 8f       	std	Z+28, r26	; 0x1c
     29e:	b5 8f       	std	Z+29, r27	; 0x1d
     2a0:	86 8d       	ldd	r24, Z+30	; 0x1e
     2a2:	97 8d       	ldd	r25, Z+31	; 0x1f
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	97 8f       	std	Z+31, r25	; 0x1f
     2a8:	86 8f       	std	Z+30, r24	; 0x1e
     2aa:	08 95       	ret

000002ac <_ZN7Encoder17Encoder_Get_angleEv>:

}

int Encoder::Encoder_Get_angle()
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
	Angle = (float(Angle_count)*(float(ENCODER_MOTOR_FACTOR)/ENCODER_PPR))*360;
     2b2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     2b4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     2b6:	07 2e       	mov	r0, r23
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__floatsisf>
     2c2:	21 e8       	ldi	r18, 0x81	; 129
     2c4:	30 e8       	ldi	r19, 0x80	; 128
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5a e3       	ldi	r21, 0x3A	; 58
     2ca:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	44 eb       	ldi	r20, 0xB4	; 180
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3>
     2da:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fixsfsi>
     2de:	79 83       	std	Y+1, r23	; 0x01
     2e0:	68 83       	st	Y, r22
	return Angle;
}
     2e2:	cb 01       	movw	r24, r22
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <_ZN7Encoder20Encoder_update_SpeedEv>:

void Encoder::Encoder_update_Speed()
{
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	fc 01       	movw	r30, r24
	EncoderBuffer[3] = EncoderBuffer[2];
     2f8:	02 85       	ldd	r16, Z+10	; 0x0a
     2fa:	13 85       	ldd	r17, Z+11	; 0x0b
     2fc:	24 85       	ldd	r18, Z+12	; 0x0c
     2fe:	35 85       	ldd	r19, Z+13	; 0x0d
     300:	06 87       	std	Z+14, r16	; 0x0e
     302:	17 87       	std	Z+15, r17	; 0x0f
     304:	20 8b       	std	Z+16, r18	; 0x10
     306:	31 8b       	std	Z+17, r19	; 0x11
	EncoderBuffer[2] = EncoderBuffer[1];
     308:	c6 80       	ldd	r12, Z+6	; 0x06
     30a:	d7 80       	ldd	r13, Z+7	; 0x07
     30c:	e0 84       	ldd	r14, Z+8	; 0x08
     30e:	f1 84       	ldd	r15, Z+9	; 0x09
     310:	c2 86       	std	Z+10, r12	; 0x0a
     312:	d3 86       	std	Z+11, r13	; 0x0b
     314:	e4 86       	std	Z+12, r14	; 0x0c
     316:	f5 86       	std	Z+13, r15	; 0x0d
	EncoderBuffer[1] = EncoderBuffer[0];
     318:	42 81       	ldd	r20, Z+2	; 0x02
     31a:	53 81       	ldd	r21, Z+3	; 0x03
     31c:	64 81       	ldd	r22, Z+4	; 0x04
     31e:	75 81       	ldd	r23, Z+5	; 0x05
     320:	46 83       	std	Z+6, r20	; 0x06
     322:	57 83       	std	Z+7, r21	; 0x07
     324:	60 87       	std	Z+8, r22	; 0x08
     326:	71 87       	std	Z+9, r23	; 0x09
	EncoderBuffer[0] = Count;
     328:	86 89       	ldd	r24, Z+22	; 0x16
     32a:	97 89       	ldd	r25, Z+23	; 0x17
     32c:	a0 8d       	ldd	r26, Z+24	; 0x18
     32e:	b1 8d       	ldd	r27, Z+25	; 0x19
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	93 83       	std	Z+3, r25	; 0x03
     334:	a4 83       	std	Z+4, r26	; 0x04
     336:	b5 83       	std	Z+5, r27	; 0x05
	speed   =  ((EncoderBuffer[0]+EncoderBuffer[1]+EncoderBuffer[2]+EncoderBuffer[3])>>2);
     338:	48 0f       	add	r20, r24
     33a:	59 1f       	adc	r21, r25
     33c:	6a 1f       	adc	r22, r26
     33e:	7b 1f       	adc	r23, r27
     340:	d7 01       	movw	r26, r14
     342:	c6 01       	movw	r24, r12
     344:	84 0f       	add	r24, r20
     346:	95 1f       	adc	r25, r21
     348:	a6 1f       	adc	r26, r22
     34a:	b7 1f       	adc	r27, r23
     34c:	80 0f       	add	r24, r16
     34e:	91 1f       	adc	r25, r17
     350:	a2 1f       	adc	r26, r18
     352:	b3 1f       	adc	r27, r19
     354:	b5 95       	asr	r27
     356:	a7 95       	ror	r26
     358:	97 95       	ror	r25
     35a:	87 95       	ror	r24
     35c:	b5 95       	asr	r27
     35e:	a7 95       	ror	r26
     360:	97 95       	ror	r25
     362:	87 95       	ror	r24
     364:	82 8b       	std	Z+18, r24	; 0x12
     366:	93 8b       	std	Z+19, r25	; 0x13
     368:	a4 8b       	std	Z+20, r26	; 0x14
     36a:	b5 8b       	std	Z+21, r27	; 0x15
	Count = 0;
     36c:	16 8a       	std	Z+22, r1	; 0x16
     36e:	17 8a       	std	Z+23, r1	; 0x17
     370:	10 8e       	std	Z+24, r1	; 0x18
     372:	11 8e       	std	Z+25, r1	; 0x19
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>:
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
		inline void Dcr_Count(){Encoder_Count--;};
     382:	6c 98       	cbi	0x0d, 4	; 13
     384:	09 98       	cbi	0x01, 1	; 1
     386:	6c 98       	cbi	0x0d, 4	; 13
     388:	74 9a       	sbi	0x0e, 4	; 14
     38a:	09 98       	cbi	0x01, 1	; 1
     38c:	11 9a       	sbi	0x02, 1	; 2
     38e:	ea e6       	ldi	r30, 0x6A	; 106
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	82 60       	ori	r24, 0x02	; 2
     396:	80 83       	st	Z, r24
     398:	ec 9a       	sbi	0x1d, 4	; 29
     39a:	e4 9a       	sbi	0x1c, 4	; 28
     39c:	08 95       	ret

0000039e <_ZN13GenevaEncoderC1Ev>:
     39e:	fc 01       	movw	r30, r24
     3a0:	11 82       	std	Z+1, r1	; 0x01
     3a2:	10 82       	st	Z, r1
     3a4:	ee cf       	rjmp	.-36     	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     3a6:	08 95       	ret

000003a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>:
		Dcr_Count();
	}
}

int GenevaEncoder::Enoder_Get_Angle()
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
	Geneva_Angle = (float(Encoder_Count)/PPR)*360;
     3ae:	68 81       	ld	r22, Y
     3b0:	79 81       	ldd	r23, Y+1	; 0x01
     3b2:	07 2e       	mov	r0, r23
     3b4:	00 0c       	add	r0, r0
     3b6:	88 0b       	sbc	r24, r24
     3b8:	99 0b       	sbc	r25, r25
     3ba:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__floatsisf>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	44 e3       	ldi	r20, 0x34	; 52
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__divsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	44 eb       	ldi	r20, 0xB4	; 180
     3d0:	53 e4       	ldi	r21, 0x43	; 67
     3d2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3>
     3d6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fixsfsi>
     3da:	7f 83       	std	Y+7, r23	; 0x07
     3dc:	6e 83       	std	Y+6, r22	; 0x06
	return Geneva_Angle;
}
     3de:	cb 01       	movw	r24, r22
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN11GenevaMotor7InitPWMEv>:
	SetOcrValue(0);
}

void GenevaMotor::InitPWM()
{
	OUTPUT(DD_F_G);
     3e6:	24 9a       	sbi	0x04, 4	; 4
	OUTPUT(DD_B_G);
     3e8:	27 9a       	sbi	0x04, 7	; 4
	
	OUTPUT(DD_PWM_G);
     3ea:	25 9a       	sbi	0x04, 5	; 4
	 
	PWM_TCCRA_G |= (1 << PWM_G_COM1)| (1 << PWM_G_WGM1);                                   //Fast PWM
     3ec:	e0 e8       	ldi	r30, 0x80	; 128
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	82 68       	ori	r24, 0x82	; 130
     3f4:	80 83       	st	Z, r24
	
	
	PWM_TCCRB_G |= (1 << PWM_G_WGM2) | (1 << PWM_G_WGM3) | (1 << PWM_G_CS1);
     3f6:	e1 e8       	ldi	r30, 0x81	; 129
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	8a 61       	ori	r24, 0x1A	; 26
     3fe:	80 83       	st	Z, r24
	PWM_ICR_G    = ICR_TOP;
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 87 00 	sts	0x0087, r25
     408:	80 93 86 00 	sts	0x0086, r24
     40c:	08 95       	ret

0000040e <_ZN11GenevaMotor19SetForwardDirectionEv>:
}

void GenevaMotor::SetForwardDirection()
{
	SET(DD_F_G);
     40e:	2c 9a       	sbi	0x05, 4	; 5
	CLEAR(DD_B_G);
     410:	2f 98       	cbi	0x05, 7	; 5
     412:	08 95       	ret

00000414 <_ZN11GenevaMotor19SetReverseDirectionEv>:
}

void GenevaMotor::SetReverseDirection()
{
	CLEAR(DD_F_G);
     414:	2c 98       	cbi	0x05, 4	; 5
	SET(DD_B_G);
     416:	2f 9a       	sbi	0x05, 7	; 5
     418:	08 95       	ret

0000041a <_ZN11GenevaMotor9StopMotorEv>:
}

void GenevaMotor::StopMotor()
{
	SET(DD_F_G);
     41a:	2c 9a       	sbi	0x05, 4	; 5
	SET(DD_B_G);
     41c:	2f 9a       	sbi	0x05, 7	; 5
	
	PWM_OCR_G = 0;
     41e:	10 92 89 00 	sts	0x0089, r1
     422:	10 92 88 00 	sts	0x0088, r1
     426:	08 95       	ret

00000428 <_ZN11GenevaMotor11SetOcrValueEi>:
}

void GenevaMotor::SetOcrValue(int ocr)
{
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	8c 01       	movw	r16, r24
     432:	eb 01       	movw	r28, r22
	if (ocr > 0)
     434:	1c 16       	cp	r1, r28
     436:	1d 06       	cpc	r1, r29
     438:	0c f4       	brge	.+2      	; 0x43c <_ZN11GenevaMotor11SetOcrValueEi+0x14>
		SetForwardDirection();
     43a:	e9 df       	rcall	.-46     	; 0x40e <_ZN11GenevaMotor19SetForwardDirectionEv>
	if(ocr >= MAX_VALUE)
     43c:	c9 3f       	cpi	r28, 0xF9	; 249
     43e:	d1 05       	cpc	r29, r1
     440:	44 f4       	brge	.+16     	; 0x452 <_ZN11GenevaMotor11SetOcrValueEi+0x2a>
		ocr = MAX_VALUE;
		
	if (ocr < 0)
     442:	dd 23       	and	r29, r29
     444:	44 f4       	brge	.+16     	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
	{
		ocr = -ocr;
     446:	d1 95       	neg	r29
     448:	c1 95       	neg	r28
     44a:	d1 09       	sbc	r29, r1
		SetReverseDirection();
     44c:	c8 01       	movw	r24, r16
     44e:	e2 df       	rcall	.-60     	; 0x414 <_ZN11GenevaMotor19SetReverseDirectionEv>
     450:	02 c0       	rjmp	.+4      	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
void GenevaMotor::SetOcrValue(int ocr)
{
	if (ocr > 0)
		SetForwardDirection();
	if(ocr >= MAX_VALUE)
		ocr = MAX_VALUE;
     452:	c9 ef       	ldi	r28, 0xF9	; 249
     454:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ocr = -ocr;
		SetReverseDirection();
	}
	
	PWM_OCR_G = ocr;
     456:	d0 93 89 00 	sts	0x0089, r29
     45a:	c0 93 88 00 	sts	0x0088, r28
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>:


#include "GenevaMotor.h"

void GenevaMotor::Initialize_Geneva_Motor()
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ec 01       	movw	r28, r24
	InitPWM();
     46e:	bb df       	rcall	.-138    	; 0x3e6 <_ZN11GenevaMotor7InitPWMEv>
	StopMotor();
     470:	ce 01       	movw	r24, r28
     472:	d3 df       	rcall	.-90     	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
	SetOcrValue(0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	ce 01       	movw	r24, r28
     47a:	d6 df       	rcall	.-84     	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__vector_15>:
void Initialize_Global_Timer()
{
	TCNT2 = 0;
	TCCR2B |= (1<<CS20)|(1<<CS21)|(1<<CS22);
	TIMSK2 |= (1<<TOIE2);
	TIFR2  |= (1<<TOV2);
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	80 91 ed 02 	lds	r24, 0x02ED
     498:	90 91 ee 02 	lds	r25, 0x02EE
     49c:	a0 91 ef 02 	lds	r26, 0x02EF
     4a0:	b0 91 f0 02 	lds	r27, 0x02F0
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	a1 1d       	adc	r26, r1
     4a8:	b1 1d       	adc	r27, r1
     4aa:	80 93 ed 02 	sts	0x02ED, r24
     4ae:	90 93 ee 02 	sts	0x02EE, r25
     4b2:	a0 93 ef 02 	sts	0x02EF, r26
     4b6:	b0 93 f0 02 	sts	0x02F0, r27
     4ba:	80 91 e9 02 	lds	r24, 0x02E9
     4be:	90 91 ea 02 	lds	r25, 0x02EA
     4c2:	a0 91 eb 02 	lds	r26, 0x02EB
     4c6:	b0 91 ec 02 	lds	r27, 0x02EC
     4ca:	03 96       	adiw	r24, 0x03	; 3
     4cc:	a1 1d       	adc	r26, r1
     4ce:	b1 1d       	adc	r27, r1
     4d0:	80 93 e9 02 	sts	0x02E9, r24
     4d4:	90 93 ea 02 	sts	0x02EA, r25
     4d8:	a0 93 eb 02 	sts	0x02EB, r26
     4dc:	b0 93 ec 02 	sts	0x02EC, r27
     4e0:	80 91 e9 02 	lds	r24, 0x02E9
     4e4:	90 91 ea 02 	lds	r25, 0x02EA
     4e8:	a0 91 eb 02 	lds	r26, 0x02EB
     4ec:	b0 91 ec 02 	lds	r27, 0x02EC
     4f0:	8d 37       	cpi	r24, 0x7D	; 125
     4f2:	91 05       	cpc	r25, r1
     4f4:	a1 05       	cpc	r26, r1
     4f6:	b1 05       	cpc	r27, r1
     4f8:	38 f1       	brcs	.+78     	; 0x548 <__vector_15+0xc6>
     4fa:	80 91 e9 02 	lds	r24, 0x02E9
     4fe:	90 91 ea 02 	lds	r25, 0x02EA
     502:	a0 91 eb 02 	lds	r26, 0x02EB
     506:	b0 91 ec 02 	lds	r27, 0x02EC
     50a:	8d 57       	subi	r24, 0x7D	; 125
     50c:	91 09       	sbc	r25, r1
     50e:	a1 09       	sbc	r26, r1
     510:	b1 09       	sbc	r27, r1
     512:	80 93 e9 02 	sts	0x02E9, r24
     516:	90 93 ea 02 	sts	0x02EA, r25
     51a:	a0 93 eb 02 	sts	0x02EB, r26
     51e:	b0 93 ec 02 	sts	0x02EC, r27
     522:	80 91 ed 02 	lds	r24, 0x02ED
     526:	90 91 ee 02 	lds	r25, 0x02EE
     52a:	a0 91 ef 02 	lds	r26, 0x02EF
     52e:	b0 91 f0 02 	lds	r27, 0x02F0
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	a1 1d       	adc	r26, r1
     536:	b1 1d       	adc	r27, r1
     538:	80 93 ed 02 	sts	0x02ED, r24
     53c:	90 93 ee 02 	sts	0x02EE, r25
     540:	a0 93 ef 02 	sts	0x02EF, r26
     544:	b0 93 f0 02 	sts	0x02F0, r27
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <_Z6millisv>:
     55a:	2f b7       	in	r18, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	60 91 ed 02 	lds	r22, 0x02ED
     562:	70 91 ee 02 	lds	r23, 0x02EE
     566:	80 91 ef 02 	lds	r24, 0x02EF
     56a:	90 91 f0 02 	lds	r25, 0x02F0
     56e:	2f bf       	out	0x3f, r18	; 63
     570:	08 95       	ret

00000572 <_Z21initialise_timeperiodv>:
     572:	e1 eb       	ldi	r30, 0xB1	; 177
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
     57c:	e0 e7       	ldi	r30, 0x70	; 112
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	81 60       	ori	r24, 0x01	; 1
     584:	80 83       	st	Z, r24
     586:	10 92 b2 00 	sts	0x00B2, r1
     58a:	08 95       	ret

0000058c <_Z10Run_Genevav>:
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 df 02 	sts	0x02DF, r24
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	90 93 49 02 	sts	0x0249, r25
     59a:	80 93 48 02 	sts	0x0248, r24
     59e:	08 95       	ret

000005a0 <_Z35Initialize_Throwing12TCRT_Interruptv>:
     5a0:	51 98       	cbi	0x0a, 1	; 10
     5a2:	59 9a       	sbi	0x0b, 1	; 11
     5a4:	e9 e6       	ldi	r30, 0x69	; 105
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 83       	st	Z, r24
     5ae:	ea 9a       	sbi	0x1d, 2	; 29
     5b0:	e2 9a       	sbi	0x1c, 2	; 28
     5b2:	08 95       	ret

000005b4 <_Z34Initialize_Throwing3TCRT_Interruptv>:
     5b4:	52 98       	cbi	0x0a, 2	; 10
     5b6:	5a 9a       	sbi	0x0b, 2	; 11
     5b8:	e9 e6       	ldi	r30, 0x69	; 105
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	80 83       	st	Z, r24
     5c2:	e9 9a       	sbi	0x1d, 1	; 29
     5c4:	e1 9a       	sbi	0x1c, 1	; 28
     5c6:	08 95       	ret

000005c8 <_Z14Initialize_Allv>:
     5c8:	eb df       	rcall	.-42     	; 0x5a0 <_Z35Initialize_Throwing12TCRT_Interruptv>
     5ca:	f4 df       	rcall	.-24     	; 0x5b4 <_Z34Initialize_Throwing3TCRT_Interruptv>
     5cc:	84 ed       	ldi	r24, 0xD4	; 212
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN5Motor10InitialiseEv>
     5d4:	80 eb       	ldi	r24, 0xB0	; 176
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	21 de       	rcall	.-958    	; 0x21c <_ZN7Encoder18Encoder_InitializeEv>
     5da:	85 ed       	ldi	r24, 0xD5	; 213
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	44 df       	rcall	.-376    	; 0x468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>
     5e0:	88 ea       	ldi	r24, 0xA8	; 168
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	ce ce       	rjmp	.-612    	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     5e6:	08 95       	ret

000005e8 <_Z27Initial_Position_Of_The_ARMv>:
}

void Initial_Position_Of_The_ARM(void)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
	sei();
     5ec:	78 94       	sei
	while(!READ(Throwing_3TCRT))
     5ee:	4a 99       	sbic	0x09, 2	; 9
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <_Z27Initial_Position_Of_The_ARMv+0x18>
	{
		M.SetOcrValue(-60);
     5f2:	64 ec       	ldi	r22, 0xC4	; 196
     5f4:	7f ef       	ldi	r23, 0xFF	; 255
     5f6:	84 ed       	ldi	r24, 0xD4	; 212
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	dd d7       	rcall	.+4026   	; 0x15b6 <_ZN5Motor11SetOcrValueEi>
}

void Initial_Position_Of_The_ARM(void)
{
	sei();
	while(!READ(Throwing_3TCRT))
     5fc:	4a 9b       	sbis	0x09, 2	; 9
     5fe:	f9 cf       	rjmp	.-14     	; 0x5f2 <_Z27Initial_Position_Of_The_ARMv+0xa>
	{
		M.SetOcrValue(-60);
	}
	E.Angle_count = 0;
     600:	c0 eb       	ldi	r28, 0xB0	; 176
     602:	d2 e0       	ldi	r29, 0x02	; 2
     604:	1f 8e       	std	Y+31, r1	; 0x1f
     606:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     608:	84 ed       	ldi	r24, 0xD4	; 212
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	c7 d7       	rcall	.+3982   	; 0x159c <_ZN5Motor9StopMotorEv>
	TCRTRevolutionCount = 0;
     60e:	10 92 1a 02 	sts	0x021A, r1
     612:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     616:	1a 8e       	std	Y+26, r1	; 0x1a
     618:	1b 8e       	std	Y+27, r1	; 0x1b
     61a:	1c 8e       	std	Y+28, r1	; 0x1c
     61c:	1d 8e       	std	Y+29, r1	; 0x1d
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     61e:	e9 e7       	ldi	r30, 0x79	; 121
     620:	f2 e0       	ldi	r31, 0x02	; 2
     622:	16 a6       	std	Z+46, r1	; 0x2e
     624:	15 a6       	std	Z+45, r1	; 0x2d
     626:	8e 8d       	ldd	r24, Y+30	; 0x1e
     628:	9f 8d       	ldd	r25, Y+31	; 0x1f
     62a:	90 93 78 02 	sts	0x0278, r25
     62e:	80 93 77 02 	sts	0x0277, r24
	
	
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(E.Angle_count);
	PIDFlag = false;
     632:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput = 0;
     636:	15 a2       	std	Z+37, r1	; 0x25
     638:	16 a2       	std	Z+38, r1	; 0x26
     63a:	17 a2       	std	Z+39, r1	; 0x27
     63c:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.output    = 0;
     63e:	15 8e       	std	Z+29, r1	; 0x1d
     640:	16 8e       	std	Z+30, r1	; 0x1e
     642:	17 8e       	std	Z+31, r1	; 0x1f
     644:	10 a2       	std	Z+32, r1	; 0x20
	Speed_PID.Iterm     = 0;
     646:	11 a2       	std	Z+33, r1	; 0x21
     648:	12 a2       	std	Z+34, r1	; 0x22
     64a:	13 a2       	std	Z+35, r1	; 0x23
     64c:	14 a2       	std	Z+36, r1	; 0x24
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_Z8GoToHomev>:

void GoToHome()
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
	sei();
     658:	78 94       	sei
	while(!READ(Home_TCRT))
     65a:	4b 99       	sbic	0x09, 3	; 9
     65c:	07 c0       	rjmp	.+14     	; 0x66c <_Z8GoToHomev+0x18>
	{
		M.SetOcrValue(-60);	
     65e:	64 ec       	ldi	r22, 0xC4	; 196
     660:	7f ef       	ldi	r23, 0xFF	; 255
     662:	84 ed       	ldi	r24, 0xD4	; 212
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	a7 d7       	rcall	.+3918   	; 0x15b6 <_ZN5Motor11SetOcrValueEi>
}

void GoToHome()
{
	sei();
	while(!READ(Home_TCRT))
     668:	4b 9b       	sbis	0x09, 3	; 9
     66a:	f9 cf       	rjmp	.-14     	; 0x65e <_Z8GoToHomev+0xa>
	{
		M.SetOcrValue(-60);	
	//	ReachedHome = false;
	}
	E.Angle_count = 0;
     66c:	c0 eb       	ldi	r28, 0xB0	; 176
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	1f 8e       	std	Y+31, r1	; 0x1f
     672:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     674:	84 ed       	ldi	r24, 0xD4	; 212
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	91 d7       	rcall	.+3874   	; 0x159c <_ZN5Motor9StopMotorEv>
	
	TCRTRevolutionCount = 0;
     67a:	10 92 1a 02 	sts	0x021A, r1
     67e:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     682:	1a 8e       	std	Y+26, r1	; 0x1a
     684:	1b 8e       	std	Y+27, r1	; 0x1b
     686:	1c 8e       	std	Y+28, r1	; 0x1c
     688:	1d 8e       	std	Y+29, r1	; 0x1d
     68a:	e9 e7       	ldi	r30, 0x79	; 121
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	16 a6       	std	Z+46, r1	; 0x2e
     690:	15 a6       	std	Z+45, r1	; 0x2d
     692:	10 92 78 02 	sts	0x0278, r1
     696:	10 92 77 02 	sts	0x0277, r1
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(0);
	PIDFlag = false;
     69a:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput  = 0;
     69e:	15 a2       	std	Z+37, r1	; 0x25
     6a0:	16 a2       	std	Z+38, r1	; 0x26
     6a2:	17 a2       	std	Z+39, r1	; 0x27
     6a4:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.Iterm      = 0;
     6a6:	11 a2       	std	Z+33, r1	; 0x21
     6a8:	12 a2       	std	Z+34, r1	; 0x22
     6aa:	13 a2       	std	Z+35, r1	; 0x23
     6ac:	14 a2       	std	Z+36, r1	; 0x24
	Speed_PID.output     = 0;
     6ae:	15 8e       	std	Z+29, r1	; 0x1d
     6b0:	16 8e       	std	Z+30, r1	; 0x1e
     6b2:	17 8e       	std	Z+31, r1	; 0x1f
     6b4:	10 a2       	std	Z+32, r1	; 0x20
		
	Stopping = true;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 d8 02 	sts	0x02D8, r24
	
	if (!Golden_Rack && !ShuttleCockArm_home)
     6bc:	80 91 da 02 	lds	r24, 0x02DA
     6c0:	81 11       	cpse	r24, r1
     6c2:	10 c0       	rjmp	.+32     	; 0x6e4 <_Z8GoToHomev+0x90>
     6c4:	80 91 d6 02 	lds	r24, 0x02D6
     6c8:	81 11       	cpse	r24, r1
     6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <_Z8GoToHomev+0x90>
	{
		ShuttleCockArm_home = true;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 d6 02 	sts	0x02D6, r24
		previous_time_gone_home = millis();
     6d2:	43 df       	rcall	.-378    	; 0x55a <_Z6millisv>
     6d4:	60 93 15 02 	sts	0x0215, r22
     6d8:	70 93 16 02 	sts	0x0216, r23
     6dc:	80 93 17 02 	sts	0x0217, r24
     6e0:	90 93 18 02 	sts	0x0218, r25
	}	
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <_Z12FlyingDragonv>:
	}
}

void FlyingDragon()
{
	TZ3 = true;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 e1 02 	sts	0x02E1, r24
	TZ1 = false;
     6f0:	10 92 e3 02 	sts	0x02E3, r1
	TZ2 = false;
     6f4:	10 92 e2 02 	sts	0x02E2, r1
	//dir = 1;
	motor_speed = 45;         //56  49
     6f8:	2d e2       	ldi	r18, 0x2D	; 45
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	30 93 0f 02 	sts	0x020F, r19
     700:	20 93 0e 02 	sts	0x020E, r18
	Goflag = true;
     704:	80 93 e6 02 	sts	0x02E6, r24
	PIDFlag = true;
     708:	80 93 00 02 	sts	0x0200, r24
	Ramp_up_flag = true;
     70c:	80 93 e5 02 	sts	0x02E5, r24
     710:	80 91 12 02 	lds	r24, 0x0212
     714:	90 91 13 02 	lds	r25, 0x0213
     718:	90 93 a7 02 	sts	0x02A7, r25
     71c:	80 93 a6 02 	sts	0x02A6, r24
	Speed_PID.SetSetPoint(Speed);
	TCRTRevolutionCount = 0;
     720:	10 92 1a 02 	sts	0x021A, r1
     724:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     728:	10 92 ca 02 	sts	0x02CA, r1
     72c:	10 92 cb 02 	sts	0x02CB, r1
     730:	10 92 cc 02 	sts	0x02CC, r1
     734:	10 92 cd 02 	sts	0x02CD, r1
	ReachedHome = false;
     738:	10 92 d9 02 	sts	0x02D9, r1
	
	SET(Plick_Plick);
     73c:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     73e:	40 9a       	sbi	0x08, 0	; 8
     740:	08 95       	ret

00000742 <main>:
 int add;
 int geneva_count;
 //uint8_t dir = -1;

int main(void)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	61 97       	sbiw	r28, 0x11	; 17
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
	OUTPUT(Pneumatic);
     756:	ea e0       	ldi	r30, 0x0A	; 10
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	80 81       	ld	r24, Z
     75c:	81 60       	ori	r24, 0x01	; 1
     75e:	80 83       	st	Z, r24
	SET(Pneumatic);
     760:	eb e0       	ldi	r30, 0x0B	; 11
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	80 81       	ld	r24, Z
     766:	81 60       	ori	r24, 0x01	; 1
     768:	80 83       	st	Z, r24
	
	OUTPUT(ShuttleCockArm_P);
     76a:	9a 9a       	sbi	0x13, 2	; 19
	CLEAR(ShuttleCockArm_P);
     76c:	a2 98       	cbi	0x14, 2	; 20
	
	OUTPUT(Grip_P);
     76e:	98 9a       	sbi	0x13, 0	; 19
	CLEAR(Grip_P);
     770:	a0 98       	cbi	0x14, 0	; 20
	
	OUTPUT(Plick_Plick);
     772:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(Plick_Plick_2);
     774:	38 9a       	sbi	0x07, 0	; 7
	SET(Plick_Plick);
     776:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     778:	40 9a       	sbi	0x08, 0	; 8
	
	Initialize_All();
     77a:	26 df       	rcall	.-436    	; 0x5c8 <_Z14Initialize_Allv>
	initialise_timeperiod();
     77c:	fa de       	rcall	.-524    	; 0x572 <_Z21initialise_timeperiodv>
	
	
	Speed_PID.Initialize();
     77e:	89 e7       	ldi	r24, 0x79	; 121
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	7e d7       	rcall	.+3836   	; 0x1680 <_ZN3PID10InitializeEv>
	public:
			float lastinput;
			float offset;
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
     784:	e9 e7       	ldi	r30, 0x79	; 121
     786:	f2 e0       	ldi	r31, 0x02	; 2
     788:	0f 2e       	mov	r0, r31
     78a:	41 2c       	mov	r4, r1
     78c:	51 2c       	mov	r5, r1
     78e:	f9 e7       	ldi	r31, 0x79	; 121
     790:	6f 2e       	mov	r6, r31
     792:	f3 ec       	ldi	r31, 0xC3	; 195
     794:	7f 2e       	mov	r7, r31
     796:	f0 2d       	mov	r31, r0
     798:	45 8a       	std	Z+21, r4	; 0x15
     79a:	56 8a       	std	Z+22, r5	; 0x16
     79c:	67 8a       	std	Z+23, r6	; 0x17
     79e:	70 8e       	std	Z+24, r7	; 0x18
     7a0:	0f 2e       	mov	r0, r31
     7a2:	81 2c       	mov	r8, r1
     7a4:	91 2c       	mov	r9, r1
     7a6:	f9 e7       	ldi	r31, 0x79	; 121
     7a8:	af 2e       	mov	r10, r31
     7aa:	f3 e4       	ldi	r31, 0x43	; 67
     7ac:	bf 2e       	mov	r11, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	81 8a       	std	Z+17, r8	; 0x11
     7b2:	92 8a       	std	Z+18, r9	; 0x12
     7b4:	a3 8a       	std	Z+19, r10	; 0x13
     7b6:	b4 8a       	std	Z+20, r11	; 0x14
	Speed_PID.Set_Range(-249,249);
	Speed_PID.Set_PID(4.1,0.399,8.4);     //   6.65,0.234,3.949    8.10,0.454,11.10   7.00,0.259,3.799   7.00,0.259,3.799  10.00,0.489,10.150  8.80,0.169,5.550      //8.05,0.115,4.299	 10.95,0.329,18.650  8.10,0.169,11.10// 9.25,0.454,6.800   8.30,0.504,9.650
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f6 e6       	ldi	r31, 0x66	; 102
     7bc:	cf 2e       	mov	r12, r31
     7be:	dc 2c       	mov	r13, r12
     7c0:	f6 e0       	ldi	r31, 0x06	; 6
     7c2:	ef 2e       	mov	r14, r31
     7c4:	f1 e4       	ldi	r31, 0x41	; 65
     7c6:	ff 2e       	mov	r15, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	0a eb       	ldi	r16, 0xBA	; 186
     7cc:	19 e4       	ldi	r17, 0x49	; 73
     7ce:	2c ec       	ldi	r18, 0xCC	; 204
     7d0:	3e e3       	ldi	r19, 0x3E	; 62
     7d2:	43 e3       	ldi	r20, 0x33	; 51
     7d4:	53 e3       	ldi	r21, 0x33	; 51
     7d6:	63 e8       	ldi	r22, 0x83	; 131
     7d8:	70 e4       	ldi	r23, 0x40	; 64
     7da:	cf 01       	movw	r24, r30
     7dc:	73 d7       	rcall	.+3814   	; 0x16c4 <_ZN3PID7Set_PIDEfff>

	Angle_PID.Initialize();
     7de:	8a e4       	ldi	r24, 0x4A	; 74
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	4e d7       	rcall	.+3740   	; 0x1680 <_ZN3PID10InitializeEv>
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa e4       	ldi	r31, 0x4A	; 74
     7e8:	2f 2e       	mov	r2, r31
     7ea:	f2 e0       	ldi	r31, 0x02	; 2
     7ec:	3f 2e       	mov	r3, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	f1 01       	movw	r30, r2
     7f2:	45 8a       	std	Z+21, r4	; 0x15
     7f4:	56 8a       	std	Z+22, r5	; 0x16
     7f6:	67 8a       	std	Z+23, r6	; 0x17
     7f8:	70 8e       	std	Z+24, r7	; 0x18
     7fa:	81 8a       	std	Z+17, r8	; 0x11
     7fc:	92 8a       	std	Z+18, r9	; 0x12
     7fe:	a3 8a       	std	Z+19, r10	; 0x13
     800:	b4 8a       	std	Z+20, r11	; 0x14
	Angle_PID.Set_Range(-249,249);
	Angle_PID.Set_PID(3.49,0.080,8.699 );                  //3.19,0.029,7.599  3.49,0.080,8.699   5.19,0.1,3.699
     802:	0f 2e       	mov	r0, r31
     804:	fb e1       	ldi	r31, 0x1B	; 27
     806:	cf 2e       	mov	r12, r31
     808:	ff e2       	ldi	r31, 0x2F	; 47
     80a:	df 2e       	mov	r13, r31
     80c:	fb e0       	ldi	r31, 0x0B	; 11
     80e:	ef 2e       	mov	r14, r31
     810:	f1 e4       	ldi	r31, 0x41	; 65
     812:	ff 2e       	mov	r15, r31
     814:	f0 2d       	mov	r31, r0
     816:	0a e0       	ldi	r16, 0x0A	; 10
     818:	17 ed       	ldi	r17, 0xD7	; 215
     81a:	23 ea       	ldi	r18, 0xA3	; 163
     81c:	3d e3       	ldi	r19, 0x3D	; 61
     81e:	49 e2       	ldi	r20, 0x29	; 41
     820:	5c e5       	ldi	r21, 0x5C	; 92
     822:	6f e5       	ldi	r22, 0x5F	; 95
     824:	70 e4       	ldi	r23, 0x40	; 64
     826:	c1 01       	movw	r24, r2
     828:	4d d7       	rcall	.+3738   	; 0x16c4 <_ZN3PID7Set_PIDEfff>
	
	
	Geneva_PID.Initialize();
     82a:	8b e1       	ldi	r24, 0x1B	; 27
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	28 d7       	rcall	.+3664   	; 0x1680 <_ZN3PID10InitializeEv>
     830:	eb e1       	ldi	r30, 0x1B	; 27
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	45 8a       	std	Z+21, r4	; 0x15
     836:	56 8a       	std	Z+22, r5	; 0x16
     838:	67 8a       	std	Z+23, r6	; 0x17
     83a:	70 8e       	std	Z+24, r7	; 0x18
     83c:	81 8a       	std	Z+17, r8	; 0x11
     83e:	92 8a       	std	Z+18, r9	; 0x12
     840:	a3 8a       	std	Z+19, r10	; 0x13
     842:	b4 8a       	std	Z+20, r11	; 0x14
	Geneva_PID.Set_Range(-249,249);
	Geneva_PID.Set_PID(26.0,0,18);                        //15.50 0.015 0            60.50,0.219,4.199   54.40,0.045,10.70
     844:	0f 2e       	mov	r0, r31
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	f0 e9       	ldi	r31, 0x90	; 144
     84c:	ef 2e       	mov	r14, r31
     84e:	f1 e4       	ldi	r31, 0x41	; 65
     850:	ff 2e       	mov	r15, r31
     852:	f0 2d       	mov	r31, r0
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	98 01       	movw	r18, r16
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 ed       	ldi	r22, 0xD0	; 208
     860:	71 e4       	ldi	r23, 0x41	; 65
     862:	cf 01       	movw	r24, r30
     864:	2f d7       	rcall	.+3678   	; 0x16c4 <_ZN3PID7Set_PIDEfff>
	sei();
     866:	78 94       	sei
	
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
     868:	89 e1       	ldi	r24, 0x19	; 25
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z10uart3_initj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     870:	8f e3       	ldi	r24, 0x3F	; 63
     872:	9c e9       	ldi	r25, 0x9C	; 156
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <main+0x132>
     878:	00 c0       	rjmp	.+0      	; 0x87a <main+0x138>
     87a:	00 00       	nop
/*	uart2_init(UART_BAUD_SELECT(9600,F_CPU));*/
//	uart0_puts("Give Commands!!!\r\n");

	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
     87c:	b5 de       	rcall	.-662    	; 0x5e8 <_Z27Initial_Position_Of_The_ARMv>
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     87e:	8f e0       	ldi	r24, 0x0F	; 15
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	f1 01       	movw	r30, r2
     884:	96 a7       	std	Z+46, r25	; 0x2e
     886:	85 a7       	std	Z+45, r24	; 0x2d
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
     888:	84 ec       	ldi	r24, 0xC4	; 196
     88a:	9f ef       	ldi	r25, 0xFF	; 255
     88c:	90 93 0f 02 	sts	0x020F, r25
     890:	80 93 0e 02 	sts	0x020E, r24
	
	Speed = -30;
     894:	82 ee       	ldi	r24, 0xE2	; 226
     896:	9f ef       	ldi	r25, 0xFF	; 255
     898:	90 93 13 02 	sts	0x0213, r25
     89c:	80 93 12 02 	sts	0x0212, r24
     8a0:	ff ef       	ldi	r31, 0xFF	; 255
     8a2:	29 e6       	ldi	r18, 0x69	; 105
     8a4:	38 e1       	ldi	r19, 0x18	; 24
     8a6:	f1 50       	subi	r31, 0x01	; 1
     8a8:	20 40       	sbci	r18, 0x00	; 0
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <main+0x164>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <main+0x16e>
     8b0:	00 00       	nop
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
	_delay_ms(500);
	CLEAR(Plick_Plick);
     8b2:	46 98       	cbi	0x08, 6	; 8
	CLEAR(Plick_Plick_2);
     8b4:	40 98       	cbi	0x08, 0	; 8
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
     8b6:	41 2c       	mov	r4, r1
     8b8:	51 2c       	mov	r5, r1
     8ba:	32 01       	movw	r6, r4
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
     8bc:	1f 82       	std	Y+7, r1	; 0x07
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
     8be:	1b 82       	std	Y+3, r1	; 0x03
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
     8c0:	1d 86       	std	Y+13, r1	; 0x0d
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
     8c2:	1a 86       	std	Y+10, r1	; 0x0a
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
     8c4:	18 86       	std	Y+8, r1	; 0x08
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
     8c6:	1a 82       	std	Y+2, r1	; 0x02
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
     8c8:	19 86       	std	Y+9, r1	; 0x09
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
     8ca:	18 8a       	std	Y+16, r1	; 0x10
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
     8cc:	19 8a       	std	Y+17, r1	; 0x11
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
     8ce:	1e 82       	std	Y+6, r1	; 0x06
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
     8d0:	1c 86       	std	Y+12, r1	; 0x0c
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
     8d2:	1f 86       	std	Y+15, r1	; 0x0f
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
     8d4:	1b 86       	std	Y+11, r1	; 0x0b
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
     8d6:	1e 86       	std	Y+14, r1	; 0x0e
	
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	49 83       	std	Y+1, r20	; 0x01
	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1c 82       	std	Y+4, r1	; 0x04
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f9 e7       	ldi	r31, 0x79	; 121
     8e4:	af 2e       	mov	r10, r31
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	bf 2e       	mov	r11, r31
     8ea:	f0 2d       	mov	r31, r0
     8ec:	0f 2e       	mov	r0, r31
     8ee:	fb e1       	ldi	r31, 0x1B	; 27
     8f0:	8f 2e       	mov	r8, r31
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	9f 2e       	mov	r9, r31
     8f6:	f0 2d       	mov	r31, r0
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));

			check_homeBuffer[3] = check_homeBuffer[2];
     8f8:	0f 2e       	mov	r0, r31
     8fa:	f6 e0       	ldi	r31, 0x06	; 6
     8fc:	2f 2e       	mov	r2, r31
     8fe:	f2 e0       	ldi	r31, 0x02	; 2
     900:	3f 2e       	mov	r3, r31
     902:	f0 2d       	mov	r31, r0
	CLEAR(Plick_Plick);
	CLEAR(Plick_Plick_2);
	
	while (1)
	{
		data = uart3_getc();
     904:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_Z10uart3_getcv>
     908:	80 93 14 02 	sts	0x0214, r24
		switch (data)
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	f1 97       	sbiw	r30, 0x31	; 49
     912:	e7 34       	cpi	r30, 0x47	; 71
     914:	f1 05       	cpc	r31, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <main+0x1d8>
     918:	c2 c0       	rjmp	.+388    	; 0xa9e <main+0x35c>
     91a:	88 27       	eor	r24, r24
     91c:	ee 58       	subi	r30, 0x8E	; 142
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	8f 4f       	sbci	r24, 0xFF	; 255
     922:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__tablejump2__>
				break;
			}
			
			case 'k':
			{
				run_geneva_in_loop = true;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	8f 83       	std	Y+7, r24	; 0x07
     92a:	b9 c0       	rjmp	.+370    	; 0xa9e <main+0x35c>
		data = uart3_getc();
		switch (data)
		{
			case '1':
			{
				TZ1 = true;
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	90 93 e3 02 	sts	0x02E3, r25
				TZ2 = false;
     932:	10 92 e2 02 	sts	0x02E2, r1
				TZ3 = false;
     936:	10 92 e1 02 	sts	0x02E1, r1
				//dir = -1;
				motor_speed = -62;                   //60
     93a:	e2 ec       	ldi	r30, 0xC2	; 194
     93c:	ff ef       	ldi	r31, 0xFF	; 255
     93e:	f0 93 0f 02 	sts	0x020F, r31
     942:	e0 93 0e 02 	sts	0x020E, r30
				Goflag = true;
     946:	90 93 e6 02 	sts	0x02E6, r25
				PIDFlag = true;
     94a:	90 93 00 02 	sts	0x0200, r25
				G_PID   = false;
     94e:	10 92 df 02 	sts	0x02DF, r1
				Ramp_up_flag = true;
     952:	90 93 e5 02 	sts	0x02E5, r25
     956:	80 91 12 02 	lds	r24, 0x0212
     95a:	90 91 13 02 	lds	r25, 0x0213
     95e:	f5 01       	movw	r30, r10
     960:	96 a7       	std	Z+46, r25	; 0x2e
     962:	85 a7       	std	Z+45, r24	; 0x2d
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     964:	10 92 1a 02 	sts	0x021A, r1
     968:	10 92 19 02 	sts	0x0219, r1
				E.ExtraCount = 0;
     96c:	10 92 ca 02 	sts	0x02CA, r1
     970:	10 92 cb 02 	sts	0x02CB, r1
     974:	10 92 cc 02 	sts	0x02CC, r1
     978:	10 92 cd 02 	sts	0x02CD, r1
				SET(Plick_Plick);
     97c:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     97e:	40 9a       	sbi	0x08, 0	; 8
				break;
     980:	8e c0       	rjmp	.+284    	; 0xa9e <main+0x35c>
			}
			case '2':
			{
				TZ2 = true;
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	f0 93 e2 02 	sts	0x02E2, r31
				TZ1 = false;
     988:	10 92 e3 02 	sts	0x02E3, r1
				TZ3 = false;
     98c:	10 92 e1 02 	sts	0x02E1, r1
				//dir = -1;
				G_PID = false;
     990:	10 92 df 02 	sts	0x02DF, r1
				motor_speed = -57;                                                               // -55;
     994:	27 ec       	ldi	r18, 0xC7	; 199
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	30 93 0f 02 	sts	0x020F, r19
     99c:	20 93 0e 02 	sts	0x020E, r18
				Goflag = true;
     9a0:	f0 93 e6 02 	sts	0x02E6, r31
				PIDFlag = true;
     9a4:	f0 93 00 02 	sts	0x0200, r31
				Ramp_up_flag = true;
     9a8:	f0 93 e5 02 	sts	0x02E5, r31
     9ac:	80 91 12 02 	lds	r24, 0x0212
     9b0:	90 91 13 02 	lds	r25, 0x0213
     9b4:	f5 01       	movw	r30, r10
     9b6:	96 a7       	std	Z+46, r25	; 0x2e
     9b8:	85 a7       	std	Z+45, r24	; 0x2d
				Speed_PID.SetSetPoint( Speed);
				TCRTRevolutionCount = 0;
     9ba:	10 92 1a 02 	sts	0x021A, r1
     9be:	10 92 19 02 	sts	0x0219, r1
				E.ExtraCount = 0;
     9c2:	10 92 ca 02 	sts	0x02CA, r1
     9c6:	10 92 cb 02 	sts	0x02CB, r1
     9ca:	10 92 cc 02 	sts	0x02CC, r1
     9ce:	10 92 cd 02 	sts	0x02CD, r1
				SET(Plick_Plick);
     9d2:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     9d4:	40 9a       	sbi	0x08, 0	; 8
				break;
     9d6:	63 c0       	rjmp	.+198    	; 0xa9e <main+0x35c>
// 				break;
// 			}
			
			case 's':
			{
				Goflag = false;
     9d8:	10 92 e6 02 	sts	0x02E6, r1
				PIDFlag = true;
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	f0 93 00 02 	sts	0x0200, r31
     9e2:	f5 01       	movw	r30, r10
     9e4:	16 a6       	std	Z+46, r1	; 0x2e
     9e6:	15 a6       	std	Z+45, r1	; 0x2d
				Speed_PID.SetSetPoint(0);
				M.StopMotor();
     9e8:	84 ed       	ldi	r24, 0xD4	; 212
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	d7 d5       	rcall	.+2990   	; 0x159c <_ZN5Motor9StopMotorEv>
				Speed = 0;
     9ee:	10 92 13 02 	sts	0x0213, r1
     9f2:	10 92 12 02 	sts	0x0212, r1
				TCRTRevolutionCount = 0;
     9f6:	10 92 1a 02 	sts	0x021A, r1
     9fa:	10 92 19 02 	sts	0x0219, r1
				Ramp_up_flag = false;
     9fe:	10 92 e5 02 	sts	0x02E5, r1
				break;
     a02:	4d c0       	rjmp	.+154    	; 0xa9e <main+0x35c>
			}
			case 'h':
			{ 
				Angle_PID.Set_PID(10.2,0,6.899);      //6.59,0.10,10.1   7.9,0,4.0
     a04:	0f 2e       	mov	r0, r31
     a06:	fc e9       	ldi	r31, 0x9C	; 156
     a08:	cf 2e       	mov	r12, r31
     a0a:	f4 ec       	ldi	r31, 0xC4	; 196
     a0c:	df 2e       	mov	r13, r31
     a0e:	fc ed       	ldi	r31, 0xDC	; 220
     a10:	ef 2e       	mov	r14, r31
     a12:	f0 e4       	ldi	r31, 0x40	; 64
     a14:	ff 2e       	mov	r15, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	00 e0       	ldi	r16, 0x00	; 0
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	98 01       	movw	r18, r16
     a1e:	43 e3       	ldi	r20, 0x33	; 51
     a20:	53 e3       	ldi	r21, 0x33	; 51
     a22:	63 e2       	ldi	r22, 0x23	; 35
     a24:	71 e4       	ldi	r23, 0x41	; 65
     a26:	8a e4       	ldi	r24, 0x4A	; 74
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	4c d6       	rcall	.+3224   	; 0x16c4 <_ZN3PID7Set_PIDEfff>
				CLEAR(Pneumatic);
     a2c:	eb e0       	ldi	r30, 0x0B	; 11
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	80 81       	ld	r24, Z
     a32:	8e 7f       	andi	r24, 0xFE	; 254
     a34:	80 83       	st	Z, r24
				GoToHome();
     a36:	0e de       	rcall	.-996    	; 0x654 <_Z8GoToHomev>
				break;
     a38:	32 c0       	rjmp	.+100    	; 0xa9e <main+0x35c>
			}
			case 'r':
			{
				Run_Geneva();
     a3a:	a8 dd       	rcall	.-1200   	; 0x58c <_Z10Run_Genevav>
				break;
     a3c:	30 c0       	rjmp	.+96     	; 0xa9e <main+0x35c>
			}
			case 'o':
			{
				Grab_ShuttleCock = true;
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	f0 93 de 02 	sts	0x02DE, r31
				break;
     a44:	2c c0       	rjmp	.+88     	; 0xa9e <main+0x35c>
			}
			
			case 'j':
			{
				gotRack        = true;
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	20 93 db 02 	sts	0x02DB, r18
				run_geneva_once = true;
				run_geneva_in_loop = false;
				first_Golden = true;
     a4c:	20 93 dd 02 	sts	0x02DD, r18
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
				run_geneva_in_loop = false;
     a50:	1f 82       	std	Y+7, r1	; 0x07
			}
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	3b 83       	std	Y+3, r19	; 0x03
				run_geneva_in_loop = false;
				first_Golden = true;
				break;
     a56:	23 c0       	rjmp	.+70     	; 0xa9e <main+0x35c>
			}
			
			case 'n':
			{
				SET(Pneumatic);
     a58:	eb e0       	ldi	r30, 0x0B	; 11
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	80 81       	ld	r24, Z
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	80 83       	st	Z, r24
				break;
     a62:	1d c0       	rjmp	.+58     	; 0xa9e <main+0x35c>
			}
			
			case 'm':
			{
				CLEAR(Pneumatic);
     a64:	eb e0       	ldi	r30, 0x0B	; 11
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	80 81       	ld	r24, Z
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 83       	st	Z, r24
				break;
     a6e:	17 c0       	rjmp	.+46     	; 0xa9e <main+0x35c>
// 			}
			
			case '3':
			{
				dir = 1;
				Speed = 30;
     a70:	2e e1       	ldi	r18, 0x1E	; 30
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	30 93 13 02 	sts	0x0213, r19
     a78:	20 93 12 02 	sts	0x0212, r18
				Golden_Rack = true;
     a7c:	31 e0       	ldi	r19, 0x01	; 1
     a7e:	30 93 da 02 	sts	0x02DA, r19
				run_geneva_once = true;
				first_Golden = true;
     a82:	30 93 dd 02 	sts	0x02DD, r19
			case '3':
			{
				dir = 1;
				Speed = 30;
				Golden_Rack = true;
				run_geneva_once = true;
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	4b 83       	std	Y+3, r20	; 0x03
// 				break;
// 			}
			
			case '3':
			{
				dir = 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	89 83       	std	Y+1, r24	; 0x01
				Speed = 30;
				Golden_Rack = true;
				run_geneva_once = true;
				first_Golden = true;
				break;
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <main+0x35c>
				break;
			}
					
			case 'w':
			{
				if (!Home)
     a90:	80 91 e4 02 	lds	r24, 0x02E4
     a94:	81 11       	cpse	r24, r1
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <main+0x35c>
				{
					ReceiveShuttleCock = true;	
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	90 93 e0 02 	sts	0x02E0, r25
			}

			default:break;
		}
		
		data = 0;
     a9e:	10 92 14 02 	sts	0x0214, r1
// 		uart2_putc(' ');
// 		uart2_putint(motor_speed);
// 		uart2_puts("\r\n");

		/*********************************************************************************************************************************/
			if (ShuttleCockArm_home)
     aa2:	80 91 d6 02 	lds	r24, 0x02D6
     aa6:	88 23       	and	r24, r24
     aa8:	b9 f0       	breq	.+46     	; 0xad8 <main+0x396>
			{
				if (millis()-previous_time_gone_home >= 700)
     aaa:	57 dd       	rcall	.-1362   	; 0x55a <_Z6millisv>
     aac:	00 91 15 02 	lds	r16, 0x0215
     ab0:	10 91 16 02 	lds	r17, 0x0216
     ab4:	20 91 17 02 	lds	r18, 0x0217
     ab8:	30 91 18 02 	lds	r19, 0x0218
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	80 1b       	sub	r24, r16
     ac2:	91 0b       	sbc	r25, r17
     ac4:	a2 0b       	sbc	r26, r18
     ac6:	b3 0b       	sbc	r27, r19
     ac8:	8c 3b       	cpi	r24, 0xBC	; 188
     aca:	92 40       	sbci	r25, 0x02	; 2
     acc:	a1 05       	cpc	r26, r1
     ace:	b1 05       	cpc	r27, r1
     ad0:	18 f0       	brcs	.+6      	; 0xad8 <main+0x396>
				{
					SET(ShuttleCockArm_P);
     ad2:	a2 9a       	sbi	0x14, 2	; 20
					ShuttleCockArm_home = false;
     ad4:	10 92 d6 02 	sts	0x02D6, r1
				}
			}
			
		
		/******************************************Grabbing Shuttle Cock On Masters Command************************************************/
		if (Grab_ShuttleCock)
     ad8:	80 91 de 02 	lds	r24, 0x02DE
     adc:	88 23       	and	r24, r24
     ade:	01 f1       	breq	.+64     	; 0xb20 <main+0x3de>
		{
			if (!Grabbed && !Armed && !Loaded && !UnGrab && !UnArmed)
     ae0:	f9 85       	ldd	r31, Y+9	; 0x09
     ae2:	f1 11       	cpse	r31, r1
     ae4:	5a c3       	rjmp	.+1716   	; 0x119a <main+0xa58>
     ae6:	2a 81       	ldd	r18, Y+2	; 0x02
     ae8:	21 11       	cpse	r18, r1
     aea:	1a c0       	rjmp	.+52     	; 0xb20 <main+0x3de>
     aec:	38 85       	ldd	r19, Y+8	; 0x08
     aee:	31 11       	cpse	r19, r1
     af0:	17 c0       	rjmp	.+46     	; 0xb20 <main+0x3de>
     af2:	4a 85       	ldd	r20, Y+10	; 0x0a
     af4:	41 11       	cpse	r20, r1
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <main+0x3de>
     af8:	8d 85       	ldd	r24, Y+13	; 0x0d
     afa:	81 11       	cpse	r24, r1
     afc:	11 c0       	rjmp	.+34     	; 0xb20 <main+0x3de>
			{
				CLEAR(ShuttleCockArm_P);
     afe:	a2 98       	cbi	0x14, 2	; 20
				Grabbed = true;
				previous_time = millis();
     b00:	2c dd       	rcall	.-1448   	; 0x55a <_Z6millisv>
     b02:	2b 01       	movw	r4, r22
     b04:	3c 01       	movw	r6, r24
     b06:	49 c3       	rjmp	.+1682   	; 0x119a <main+0xa58>
			}
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
     b08:	a0 9a       	sbi	0x14, 0	; 20
				Armed = true;
				Grab_ShuttleCock = false;
     b0a:	10 92 de 02 	sts	0x02DE, r1
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b0e:	80 91 e0 02 	lds	r24, 0x02E0
     b12:	81 11       	cpse	r24, r1
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <main+0x3f0>
				previous_time = millis();
			}
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
				Armed = true;
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	9a 83       	std	Y+2, r25	; 0x02
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b1a:	e1 e0       	ldi	r30, 0x01	; 1
     b1c:	e9 87       	std	Y+9, r30	; 0x09
     b1e:	6b c0       	rjmp	.+214    	; 0xbf6 <main+0x4b4>
     b20:	80 91 e0 02 	lds	r24, 0x02E0
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <main+0x3e8>
     b28:	66 c0       	rjmp	.+204    	; 0xbf6 <main+0x4b4>
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     b2a:	fa 81       	ldd	r31, Y+2	; 0x02
     b2c:	ff 23       	and	r31, r31
     b2e:	89 f0       	breq	.+34     	; 0xb52 <main+0x410>
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <main+0x3f4>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	29 87       	std	Y+9, r18	; 0x09
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     b36:	38 85       	ldd	r19, Y+8	; 0x08
     b38:	31 11       	cpse	r19, r1
     b3a:	3f c3       	rjmp	.+1662   	; 0x11ba <main+0xa78>
     b3c:	4a 85       	ldd	r20, Y+10	; 0x0a
     b3e:	41 11       	cpse	r20, r1
     b40:	21 c0       	rjmp	.+66     	; 0xb84 <main+0x442>
     b42:	8d 85       	ldd	r24, Y+13	; 0x0d
     b44:	81 11       	cpse	r24, r1
     b46:	21 c0       	rjmp	.+66     	; 0xb8a <main+0x448>
			{
				SET(ShuttleCockArm_P);
     b48:	a2 9a       	sbi	0x14, 2	; 20
				Loaded = true;
				previous_time = millis();
     b4a:	07 dd       	rcall	.-1522   	; 0x55a <_Z6millisv>
     b4c:	2b 01       	movw	r4, r22
     b4e:	3c 01       	movw	r6, r24
     b50:	34 c3       	rjmp	.+1640   	; 0x11ba <main+0xa78>
			}
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
     b52:	98 85       	ldd	r25, Y+8	; 0x08
     b54:	99 23       	and	r25, r25
     b56:	f1 f0       	breq	.+60     	; 0xb94 <main+0x452>
     b58:	00 dd       	rcall	.-1536   	; 0x55a <_Z6millisv>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	84 19       	sub	r24, r4
     b60:	95 09       	sbc	r25, r5
     b62:	a6 09       	sbc	r26, r6
     b64:	b7 09       	sbc	r27, r7
     b66:	84 38       	cpi	r24, 0x84	; 132
     b68:	93 40       	sbci	r25, 0x03	; 3
     b6a:	a1 05       	cpc	r26, r1
     b6c:	b1 05       	cpc	r27, r1
     b6e:	80 f0       	brcs	.+32     	; 0xb90 <main+0x44e>
			{
				SET(Pneumatic);
     b70:	eb e0       	ldi	r30, 0x0B	; 11
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	80 81       	ld	r24, Z
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	80 83       	st	Z, r24
				UnGrab = true;
				Loaded = false;
				previous_time = millis();
     b7a:	ef dc       	rcall	.-1570   	; 0x55a <_Z6millisv>
     b7c:	2b 01       	movw	r4, r22
     b7e:	3c 01       	movw	r6, r24
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
			{
				SET(Pneumatic);
				UnGrab = true;
				Loaded = false;
     b80:	18 86       	std	Y+8, r1	; 0x08
     b82:	0b c0       	rjmp	.+22     	; 0xb9a <main+0x458>
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	fa 83       	std	Y+2, r31	; 0x02
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <main+0x452>
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	2a 83       	std	Y+2, r18	; 0x02
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <main+0x452>
     b90:	31 e0       	ldi	r19, 0x01	; 1
     b92:	38 87       	std	Y+8, r19	; 0x08
				previous_time = millis();
			}
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
     b94:	4a 85       	ldd	r20, Y+10	; 0x0a
     b96:	44 23       	and	r20, r20
     b98:	a1 f0       	breq	.+40     	; 0xbc2 <main+0x480>
     b9a:	df dc       	rcall	.-1602   	; 0x55a <_Z6millisv>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	84 19       	sub	r24, r4
     ba2:	95 09       	sbc	r25, r5
     ba4:	a6 09       	sbc	r26, r6
     ba6:	b7 09       	sbc	r27, r7
     ba8:	88 3c       	cpi	r24, 0xC8	; 200
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	30 f0       	brcs	.+12     	; 0xbbe <main+0x47c>
			{
				CLEAR(Grip_P);
     bb2:	a0 98       	cbi	0x14, 0	; 20
				UnArmed = true;
				UnGrab = false;
				previous_time = millis();	
     bb4:	d2 dc       	rcall	.-1628   	; 0x55a <_Z6millisv>
     bb6:	2b 01       	movw	r4, r22
     bb8:	3c 01       	movw	r6, r24
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
			{
				CLEAR(Grip_P);
				UnArmed = true;
				UnGrab = false;
     bba:	1a 86       	std	Y+10, r1	; 0x0a
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <main+0x486>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	8a 87       	std	Y+10, r24	; 0x0a
				previous_time = millis();	
			}
			if (UnArmed && (millis()-previous_time) >= 100)
     bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc4:	99 23       	and	r25, r25
     bc6:	b9 f0       	breq	.+46     	; 0xbf6 <main+0x4b4>
     bc8:	c8 dc       	rcall	.-1648   	; 0x55a <_Z6millisv>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	84 19       	sub	r24, r4
     bd0:	95 09       	sbc	r25, r5
     bd2:	a6 09       	sbc	r26, r6
     bd4:	b7 09       	sbc	r27, r7
     bd6:	84 36       	cpi	r24, 0x64	; 100
     bd8:	91 05       	cpc	r25, r1
     bda:	a1 05       	cpc	r26, r1
     bdc:	b1 05       	cpc	r27, r1
     bde:	48 f0       	brcs	.+18     	; 0xbf2 <main+0x4b0>
			{
				CLEAR(ShuttleCockArm_P);
     be0:	a2 98       	cbi	0x14, 2	; 20
				ReceiveShuttleCock = false;
     be2:	10 92 e0 02 	sts	0x02E0, r1
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
				UnArmed = false;
     be6:	1d 86       	std	Y+13, r1	; 0x0d
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
     be8:	1a 86       	std	Y+10, r1	; 0x0a
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
     bea:	18 86       	std	Y+8, r1	; 0x08
			if (UnArmed && (millis()-previous_time) >= 100)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
     bec:	1a 82       	std	Y+2, r1	; 0x02
			}
			if (UnArmed && (millis()-previous_time) >= 100)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
     bee:	19 86       	std	Y+9, r1	; 0x09
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <main+0x4b4>
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	ed 87       	std	Y+13, r30	; 0x0d
				UnGrab  = false;
				UnArmed = false;
			}
		}
		
		if(abs(E1.Enoder_Get_Angle()) >= 720)
     bf6:	88 ea       	ldi	r24, 0xA8	; 168
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	d6 db       	rcall	.-2132   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
     bfc:	99 23       	and	r25, r25
     bfe:	1c f4       	brge	.+6      	; 0xc06 <main+0x4c4>
     c00:	91 95       	neg	r25
     c02:	81 95       	neg	r24
     c04:	91 09       	sbc	r25, r1
     c06:	80 3d       	cpi	r24, 0xD0	; 208
     c08:	92 40       	sbci	r25, 0x02	; 2
     c0a:	94 f0       	brlt	.+36     	; 0xc30 <main+0x4ee>
		{
			G.StopMotor();
     c0c:	85 ed       	ldi	r24, 0xD5	; 213
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	04 dc       	rcall	.-2040   	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
		inline void Reset_Count(){Encoder_Count = 0;};
     c12:	10 92 a9 02 	sts	0x02A9, r1
     c16:	10 92 a8 02 	sts	0x02A8, r1
     c1a:	f4 01       	movw	r30, r8
     c1c:	16 a6       	std	Z+46, r1	; 0x2e
     c1e:	15 a6       	std	Z+45, r1	; 0x2d
			E1.Reset_Count();
			Geneva_PID.SetSetPoint(0);
			Geneva_PID.Iterm = 0;
     c20:	11 a2       	std	Z+33, r1	; 0x21
     c22:	12 a2       	std	Z+34, r1	; 0x22
     c24:	13 a2       	std	Z+35, r1	; 0x23
     c26:	14 a2       	std	Z+36, r1	; 0x24
			Geneva_PID.output = 0;
     c28:	15 8e       	std	Z+29, r1	; 0x1d
     c2a:	16 8e       	std	Z+30, r1	; 0x1e
     c2c:	17 8e       	std	Z+31, r1	; 0x1f
     c2e:	10 a2       	std	Z+32, r1	; 0x20
		}
/***********************************************************************************************************************************/
		if (run_geneva_in_loop)
     c30:	ff 81       	ldd	r31, Y+7	; 0x07
     c32:	f1 11       	cpse	r31, r1
		{
			Run_Geneva();
     c34:	ab dc       	rcall	.-1706   	; 0x58c <_Z10Run_Genevav>
		}
 /****************************************************Golden Rack Section***********************************************************/		
  		if (gotRack)
     c36:	80 91 db 02 	lds	r24, 0x02DB
     c3a:	88 23       	and	r24, r24
     c3c:	11 f1       	breq	.+68     	; 0xc82 <main+0x540>
  		{
			if (run_geneva_once)
     c3e:	2b 81       	ldd	r18, Y+3	; 0x03
     c40:	22 23       	and	r18, r18
     c42:	21 f0       	breq	.+8      	; 0xc4c <main+0x50a>
			{
				Run_Geneva();
     c44:	a3 dc       	rcall	.-1722   	; 0x58c <_Z10Run_Genevav>
				run_geneva_once = false;
				//run_geneva_in_loop = false;
				previous_time = millis();
     c46:	89 dc       	rcall	.-1774   	; 0x55a <_Z6millisv>
     c48:	2b 01       	movw	r4, r22
     c4a:	3c 01       	movw	r6, r24
			}
			
			if (first_Golden && (millis()-previous_time) >= 800)
     c4c:	80 91 dd 02 	lds	r24, 0x02DD
     c50:	88 23       	and	r24, r24
     c52:	a1 f0       	breq	.+40     	; 0xc7c <main+0x53a>
     c54:	82 dc       	rcall	.-1788   	; 0x55a <_Z6millisv>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	84 19       	sub	r24, r4
     c5c:	95 09       	sbc	r25, r5
     c5e:	a6 09       	sbc	r26, r6
     c60:	b7 09       	sbc	r27, r7
     c62:	80 32       	cpi	r24, 0x20	; 32
     c64:	93 40       	sbci	r25, 0x03	; 3
     c66:	a1 05       	cpc	r26, r1
     c68:	b1 05       	cpc	r27, r1
     c6a:	50 f0       	brcs	.+20     	; 0xc80 <main+0x53e>
			{
				CLEAR(ShuttleCockArm_P);
     c6c:	a2 98       	cbi	0x14, 2	; 20
				first_Golden = false;
     c6e:	10 92 dd 02 	sts	0x02DD, r1
				run_geneva_once = false;
				/*uart0_puts("here");*/
				Going_To_RUNGBAY = true;
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	40 93 d7 02 	sts	0x02D7, r20
			
			if (first_Golden && (millis()-previous_time) >= 800)
			{
				CLEAR(ShuttleCockArm_P);
				first_Golden = false;
				run_geneva_once = false;
     c78:	1b 82       	std	Y+3, r1	; 0x03
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <main+0x54a>
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <main+0x540>
     c80:	1b 82       	std	Y+3, r1	; 0x03
				Going_To_RUNGBAY = true;
				//gotRack = false;
			}
		  }
	////	////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	if (Going_To_RUNGBAY)
     c82:	80 91 d7 02 	lds	r24, 0x02D7
     c86:	88 23       	and	r24, r24
     c88:	09 f4       	brne	.+2      	; 0xc8c <main+0x54a>
     c8a:	a8 c0       	rjmp	.+336    	; 0xddc <main+0x69a>
	{
		if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !caught && !GOLDEN_1)
     c8c:	8e 81       	ldd	r24, Y+6	; 0x06
     c8e:	81 11       	cpse	r24, r1
     c90:	14 c0       	rjmp	.+40     	; 0xcba <main+0x578>
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
     c94:	91 11       	cpse	r25, r1
     c96:	14 c0       	rjmp	.+40     	; 0xcc0 <main+0x57e>
     c98:	eb 85       	ldd	r30, Y+11	; 0x0b
     c9a:	e1 11       	cpse	r30, r1
     c9c:	25 c0       	rjmp	.+74     	; 0xce8 <main+0x5a6>
     c9e:	fc 85       	ldd	r31, Y+12	; 0x0c
     ca0:	f1 11       	cpse	r31, r1
     ca2:	22 c0       	rjmp	.+68     	; 0xce8 <main+0x5a6>
     ca4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ca6:	21 11       	cpse	r18, r1
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <main+0x5a6>
     caa:	38 89       	ldd	r19, Y+16	; 0x10
     cac:	31 11       	cpse	r19, r1
     cae:	1c c0       	rjmp	.+56     	; 0xce8 <main+0x5a6>
     cb0:	80 91 dc 02 	lds	r24, 0x02DC
     cb4:	81 11       	cpse	r24, r1
     cb6:	18 c0       	rjmp	.+48     	; 0xce8 <main+0x5a6>
     cb8:	83 c2       	rjmp	.+1286   	; 0x11c0 <main+0xa7e>
			//  SET(ShuttleCockArm_P);
			Gripp = true;
			previous_time = millis();
		}
		/*_delay_ms(500);*/
		if (Gripp && (millis()-previous_time) >= 800)
     cba:	4e 85       	ldd	r20, Y+14	; 0x0e
     cbc:	44 23       	and	r20, r20
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <main+0x5a6>
     cc0:	4c dc       	rcall	.-1896   	; 0x55a <_Z6millisv>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	84 19       	sub	r24, r4
     cc8:	95 09       	sbc	r25, r5
     cca:	a6 09       	sbc	r26, r6
     ccc:	b7 09       	sbc	r27, r7
     cce:	80 32       	cpi	r24, 0x20	; 32
     cd0:	93 40       	sbci	r25, 0x03	; 3
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	30 f0       	brcs	.+12     	; 0xce4 <main+0x5a2>
		{
			SET(Grip_P);
     cd8:	a0 9a       	sbi	0x14, 0	; 20
			armed = true;
			previous_time = millis();
     cda:	3f dc       	rcall	.-1922   	; 0x55a <_Z6millisv>
     cdc:	2b 01       	movw	r4, r22
     cde:	3c 01       	movw	r6, r24
			Gripp = false;
     ce0:	1e 86       	std	Y+14, r1	; 0x0e
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <main+0x5ac>
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	fe 87       	std	Y+14, r31	; 0x0e
		}
		
		/*_delay_ms(100);*/
		
		if (armed && (millis()-previous_time) >= 150)
     ce8:	2b 85       	ldd	r18, Y+11	; 0x0b
     cea:	22 23       	and	r18, r18
     cec:	a1 f0       	breq	.+40     	; 0xd16 <main+0x5d4>
     cee:	35 dc       	rcall	.-1942   	; 0x55a <_Z6millisv>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	84 19       	sub	r24, r4
     cf6:	95 09       	sbc	r25, r5
     cf8:	a6 09       	sbc	r26, r6
     cfa:	b7 09       	sbc	r27, r7
     cfc:	86 39       	cpi	r24, 0x96	; 150
     cfe:	91 05       	cpc	r25, r1
     d00:	a1 05       	cpc	r26, r1
     d02:	b1 05       	cpc	r27, r1
     d04:	30 f0       	brcs	.+12     	; 0xd12 <main+0x5d0>
		{
			SET(ShuttleCockArm_P);
     d06:	a2 9a       	sbi	0x14, 2	; 20
			geneva_start = true;
			previous_time = millis();
     d08:	28 dc       	rcall	.-1968   	; 0x55a <_Z6millisv>
     d0a:	2b 01       	movw	r4, r22
     d0c:	3c 01       	movw	r6, r24
			armed = false;
     d0e:	1b 86       	std	Y+11, r1	; 0x0b
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <main+0x5da>
     d12:	31 e0       	ldi	r19, 0x01	; 1
     d14:	3b 87       	std	Y+11, r19	; 0x0b
		}
		
		if (geneva_start && (millis()-previous_time) >= 50)
     d16:	4e 81       	ldd	r20, Y+6	; 0x06
     d18:	44 23       	and	r20, r20
     d1a:	99 f0       	breq	.+38     	; 0xd42 <main+0x600>
     d1c:	1e dc       	rcall	.-1988   	; 0x55a <_Z6millisv>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	84 19       	sub	r24, r4
     d24:	95 09       	sbc	r25, r5
     d26:	a6 09       	sbc	r26, r6
     d28:	b7 09       	sbc	r27, r7
     d2a:	c2 97       	sbiw	r24, 0x32	; 50
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	30 f0       	brcs	.+12     	; 0xd3e <main+0x5fc>
		{
			Run_Geneva();
     d32:	2c dc       	rcall	.-1960   	; 0x58c <_Z10Run_Genevav>
			caught = true;
			previous_time = millis();
     d34:	12 dc       	rcall	.-2012   	; 0x55a <_Z6millisv>
     d36:	2b 01       	movw	r4, r22
     d38:	3c 01       	movw	r6, r24
			geneva_start = false;
     d3a:	1e 82       	std	Y+6, r1	; 0x06
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <main+0x606>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8e 83       	std	Y+6, r24	; 0x06
		}
		if (caught && (millis()-previous_time) >= 800)
     d42:	98 89       	ldd	r25, Y+16	; 0x10
     d44:	99 23       	and	r25, r25
     d46:	c1 f0       	breq	.+48     	; 0xd78 <main+0x636>
     d48:	08 dc       	rcall	.-2032   	; 0x55a <_Z6millisv>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	84 19       	sub	r24, r4
     d50:	95 09       	sbc	r25, r5
     d52:	a6 09       	sbc	r26, r6
     d54:	b7 09       	sbc	r27, r7
     d56:	80 32       	cpi	r24, 0x20	; 32
     d58:	93 40       	sbci	r25, 0x03	; 3
     d5a:	a1 05       	cpc	r26, r1
     d5c:	b1 05       	cpc	r27, r1
     d5e:	50 f0       	brcs	.+20     	; 0xd74 <main+0x632>
		{
			SET(Pneumatic);
     d60:	eb e0       	ldi	r30, 0x0B	; 11
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	80 83       	st	Z, r24
			ungripp = true;
			previous_time = millis();
     d6a:	f7 db       	rcall	.-2066   	; 0x55a <_Z6millisv>
     d6c:	2b 01       	movw	r4, r22
     d6e:	3c 01       	movw	r6, r24
			caught = false;
     d70:	18 8a       	std	Y+16, r1	; 0x10
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <main+0x63c>
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	f8 8b       	std	Y+16, r31	; 0x10
		}
		if(ungripp && (millis()-previous_time) >= 150)
     d78:	2f 85       	ldd	r18, Y+15	; 0x0f
     d7a:	22 23       	and	r18, r18
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <main+0x664>
     d7e:	ed db       	rcall	.-2086   	; 0x55a <_Z6millisv>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	84 19       	sub	r24, r4
     d86:	95 09       	sbc	r25, r5
     d88:	a6 09       	sbc	r26, r6
     d8a:	b7 09       	sbc	r27, r7
     d8c:	86 39       	cpi	r24, 0x96	; 150
     d8e:	91 05       	cpc	r25, r1
     d90:	a1 05       	cpc	r26, r1
     d92:	b1 05       	cpc	r27, r1
     d94:	30 f0       	brcs	.+12     	; 0xda2 <main+0x660>
		{
			CLEAR(Grip_P);
     d96:	a0 98       	cbi	0x14, 0	; 20
			unarmed = true;
			ungripp = false;
			previous_time = millis();
     d98:	e0 db       	rcall	.-2112   	; 0x55a <_Z6millisv>
     d9a:	2b 01       	movw	r4, r22
     d9c:	3c 01       	movw	r6, r24
		}
		if(ungripp && (millis()-previous_time) >= 150)
		{
			CLEAR(Grip_P);
			unarmed = true;
			ungripp = false;
     d9e:	1f 86       	std	Y+15, r1	; 0x0f
     da0:	05 c0       	rjmp	.+10     	; 0xdac <main+0x66a>
     da2:	31 e0       	ldi	r19, 0x01	; 1
     da4:	3f 87       	std	Y+15, r19	; 0x0f
			previous_time = millis();
		}
		if (unarmed && (millis()-previous_time) >= 300)
     da6:	4c 85       	ldd	r20, Y+12	; 0x0c
     da8:	44 23       	and	r20, r20
     daa:	c1 f0       	breq	.+48     	; 0xddc <main+0x69a>
     dac:	d6 db       	rcall	.-2132   	; 0x55a <_Z6millisv>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	84 19       	sub	r24, r4
     db4:	95 09       	sbc	r25, r5
     db6:	a6 09       	sbc	r26, r6
     db8:	b7 09       	sbc	r27, r7
     dba:	8c 32       	cpi	r24, 0x2C	; 44
     dbc:	91 40       	sbci	r25, 0x01	; 1
     dbe:	a1 05       	cpc	r26, r1
     dc0:	b1 05       	cpc	r27, r1
     dc2:	50 f0       	brcs	.+20     	; 0xdd8 <main+0x696>
		{
			CLEAR(ShuttleCockArm_P);
     dc4:	a2 98       	cbi	0x14, 2	; 20
			unarmed = false;
			GOLDEN_1 = true;
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	f0 93 dc 02 	sts	0x02DC, r31
			gotRack  = false;
     dcc:	10 92 db 02 	sts	0x02DB, r1
			//previous_time = millis();
			Going_To_RUNGBAY = false;
     dd0:	10 92 d7 02 	sts	0x02D7, r1
			previous_time = millis();
		}
		if (unarmed && (millis()-previous_time) >= 300)
		{
			CLEAR(ShuttleCockArm_P);
			unarmed = false;
     dd4:	1c 86       	std	Y+12, r1	; 0x0c
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <main+0x69a>
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	2c 87       	std	Y+12, r18	; 0x0c
			Going_To_RUNGBAY = false;
		}
		
	}
		  
		  if (Golden_Rack )
     ddc:	80 91 da 02 	lds	r24, 0x02DA
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <main+0x6a4>
     de4:	e7 c0       	rjmp	.+462    	; 0xfb4 <main+0x872>
  		{
  			if ((GoldenShuttle_count < 6))
     de6:	80 91 10 02 	lds	r24, 0x0210
     dea:	90 91 11 02 	lds	r25, 0x0211
     dee:	86 30       	cpi	r24, 0x06	; 6
     df0:	91 05       	cpc	r25, r1
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <main+0x6b4>
     df4:	df c0       	rjmp	.+446    	; 0xfb4 <main+0x872>
  			{
				if (GOLDEN_1)
     df6:	20 91 dc 02 	lds	r18, 0x02DC
     dfa:	22 23       	and	r18, r18
     dfc:	41 f0       	breq	.+16     	; 0xe0e <main+0x6cc>
				{
					GoldenShuttle_count++;
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	90 93 11 02 	sts	0x0211, r25
     e04:	80 93 10 02 	sts	0x0210, r24
					FlyingDragon();
     e08:	70 dc       	rcall	.-1824   	; 0x6ea <_Z12FlyingDragonv>
					GOLDEN_1 = false;
     e0a:	10 92 dc 02 	sts	0x02DC, r1
				}
				  
  				if ((Speed == dir*30) && (ReachedHome))
     e0e:	3e e1       	ldi	r19, 0x1E	; 30
     e10:	49 81       	ldd	r20, Y+1	; 0x01
     e12:	43 03       	mulsu	r20, r19
     e14:	c0 01       	movw	r24, r0
     e16:	11 24       	eor	r1, r1
     e18:	20 91 12 02 	lds	r18, 0x0212
     e1c:	30 91 13 02 	lds	r19, 0x0213
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	09 f0       	breq	.+2      	; 0xe28 <main+0x6e6>
     e26:	c6 c0       	rjmp	.+396    	; 0xfb4 <main+0x872>
     e28:	80 91 d9 02 	lds	r24, 0x02D9
     e2c:	81 11       	cpse	r24, r1
     e2e:	db c1       	rjmp	.+950    	; 0x11e6 <main+0xaa4>
     e30:	c1 c0       	rjmp	.+386    	; 0xfb4 <main+0x872>
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     e32:	8e 85       	ldd	r24, Y+14	; 0x0e
     e34:	81 11       	cpse	r24, r1
     e36:	17 c0       	rjmp	.+46     	; 0xe66 <main+0x724>
     e38:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3a:	91 11       	cpse	r25, r1
     e3c:	28 c0       	rjmp	.+80     	; 0xe8e <main+0x74c>
     e3e:	ec 85       	ldd	r30, Y+12	; 0x0c
     e40:	e1 11       	cpse	r30, r1
     e42:	25 c0       	rjmp	.+74     	; 0xe8e <main+0x74c>
     e44:	ff 85       	ldd	r31, Y+15	; 0x0f
     e46:	f1 11       	cpse	r31, r1
     e48:	22 c0       	rjmp	.+68     	; 0xe8e <main+0x74c>
     e4a:	29 89       	ldd	r18, Y+17	; 0x11
     e4c:	21 11       	cpse	r18, r1
     e4e:	1f c0       	rjmp	.+62     	; 0xe8e <main+0x74c>
     e50:	38 89       	ldd	r19, Y+16	; 0x10
     e52:	31 11       	cpse	r19, r1
     e54:	1c c0       	rjmp	.+56     	; 0xe8e <main+0x74c>
					 {
						//SET(ShuttleCockArm_P);
 						Gripp = true;
						previous_time = millis();
     e56:	81 db       	rcall	.-2302   	; 0x55a <_Z6millisv>
     e58:	2b 01       	movw	r4, r22
     e5a:	3c 01       	movw	r6, r24
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <main+0x724>
					}
  					/*_delay_ms(500);*/
					if (Gripp && (millis()-previous_time) >= 200)
     e5e:	4e 85       	ldd	r20, Y+14	; 0x0e
     e60:	44 23       	and	r20, r20
     e62:	09 f4       	brne	.+2      	; 0xe66 <main+0x724>
     e64:	65 c2       	rjmp	.+1226   	; 0x1330 <main+0xbee>
     e66:	79 db       	rcall	.-2318   	; 0x55a <_Z6millisv>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	84 19       	sub	r24, r4
     e6e:	95 09       	sbc	r25, r5
     e70:	a6 09       	sbc	r26, r6
     e72:	b7 09       	sbc	r27, r7
     e74:	88 3c       	cpi	r24, 0xC8	; 200
     e76:	91 05       	cpc	r25, r1
     e78:	a1 05       	cpc	r26, r1
     e7a:	b1 05       	cpc	r27, r1
     e7c:	30 f0       	brcs	.+12     	; 0xe8a <main+0x748>
					{
						SET(Grip_P);
     e7e:	a0 9a       	sbi	0x14, 0	; 20
						 armed = true;
						 previous_time = millis(); 
     e80:	6c db       	rcall	.-2344   	; 0x55a <_Z6millisv>
     e82:	2b 01       	movw	r4, r22
     e84:	3c 01       	movw	r6, r24
						 Gripp = false;
     e86:	1e 86       	std	Y+14, r1	; 0x0e
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <main+0x752>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	8e 87       	std	Y+14, r24	; 0x0e
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
     e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e90:	99 23       	and	r25, r25
     e92:	a1 f0       	breq	.+40     	; 0xebc <main+0x77a>
     e94:	62 db       	rcall	.-2364   	; 0x55a <_Z6millisv>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	84 19       	sub	r24, r4
     e9c:	95 09       	sbc	r25, r5
     e9e:	a6 09       	sbc	r26, r6
     ea0:	b7 09       	sbc	r27, r7
     ea2:	86 39       	cpi	r24, 0x96	; 150
     ea4:	91 05       	cpc	r25, r1
     ea6:	a1 05       	cpc	r26, r1
     ea8:	b1 05       	cpc	r27, r1
     eaa:	30 f0       	brcs	.+12     	; 0xeb8 <main+0x776>
					{
						SET(ShuttleCockArm_P);
     eac:	a2 9a       	sbi	0x14, 2	; 20
						geneva_start = true;
						previous_time = millis();
     eae:	55 db       	rcall	.-2390   	; 0x55a <_Z6millisv>
     eb0:	2b 01       	movw	r4, r22
     eb2:	3c 01       	movw	r6, r24
						armed = false;
     eb4:	1b 86       	std	Y+11, r1	; 0x0b
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <main+0x780>
     eb8:	e1 e0       	ldi	r30, 0x01	; 1
     eba:	eb 87       	std	Y+11, r30	; 0x0b
					}
					
					if (geneva_start && (millis()-previous_time) >= 50)
     ebc:	fe 81       	ldd	r31, Y+6	; 0x06
     ebe:	ff 23       	and	r31, r31
     ec0:	99 f0       	breq	.+38     	; 0xee8 <main+0x7a6>
     ec2:	4b db       	rcall	.-2410   	; 0x55a <_Z6millisv>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	84 19       	sub	r24, r4
     eca:	95 09       	sbc	r25, r5
     ecc:	a6 09       	sbc	r26, r6
     ece:	b7 09       	sbc	r27, r7
     ed0:	c2 97       	sbiw	r24, 0x32	; 50
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	30 f0       	brcs	.+12     	; 0xee4 <main+0x7a2>
					{
						 Run_Geneva();
     ed8:	59 db       	rcall	.-2382   	; 0x58c <_Z10Run_Genevav>
						 caught = true;
						 previous_time = millis();
     eda:	3f db       	rcall	.-2434   	; 0x55a <_Z6millisv>
     edc:	2b 01       	movw	r4, r22
     ede:	3c 01       	movw	r6, r24
						 geneva_start = false;
     ee0:	1e 82       	std	Y+6, r1	; 0x06
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <main+0x7ac>
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	2e 83       	std	Y+6, r18	; 0x06
					}
					if (caught && (millis()-previous_time) >= 800)
     ee8:	38 89       	ldd	r19, Y+16	; 0x10
     eea:	33 23       	and	r19, r19
     eec:	c1 f0       	breq	.+48     	; 0xf1e <main+0x7dc>
     eee:	35 db       	rcall	.-2454   	; 0x55a <_Z6millisv>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	84 19       	sub	r24, r4
     ef6:	95 09       	sbc	r25, r5
     ef8:	a6 09       	sbc	r26, r6
     efa:	b7 09       	sbc	r27, r7
     efc:	80 32       	cpi	r24, 0x20	; 32
     efe:	93 40       	sbci	r25, 0x03	; 3
     f00:	a1 05       	cpc	r26, r1
     f02:	b1 05       	cpc	r27, r1
     f04:	50 f0       	brcs	.+20     	; 0xf1a <main+0x7d8>
					{
						SET(Pneumatic);
     f06:	eb e0       	ldi	r30, 0x0B	; 11
     f08:	f1 e0       	ldi	r31, 0x01	; 1
     f0a:	80 81       	ld	r24, Z
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24
						ungripp = true;
						previous_time = millis();
     f10:	24 db       	rcall	.-2488   	; 0x55a <_Z6millisv>
     f12:	2b 01       	movw	r4, r22
     f14:	3c 01       	movw	r6, r24
						caught = false;
     f16:	18 8a       	std	Y+16, r1	; 0x10
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <main+0x7e2>
     f1a:	f1 e0       	ldi	r31, 0x01	; 1
     f1c:	f8 8b       	std	Y+16, r31	; 0x10
					}
					if(ungripp && (millis()-previous_time) >= 150)
     f1e:	2f 85       	ldd	r18, Y+15	; 0x0f
     f20:	22 23       	and	r18, r18
     f22:	a1 f0       	breq	.+40     	; 0xf4c <main+0x80a>
     f24:	1a db       	rcall	.-2508   	; 0x55a <_Z6millisv>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	84 19       	sub	r24, r4
     f2c:	95 09       	sbc	r25, r5
     f2e:	a6 09       	sbc	r26, r6
     f30:	b7 09       	sbc	r27, r7
     f32:	86 39       	cpi	r24, 0x96	; 150
     f34:	91 05       	cpc	r25, r1
     f36:	a1 05       	cpc	r26, r1
     f38:	b1 05       	cpc	r27, r1
     f3a:	30 f0       	brcs	.+12     	; 0xf48 <main+0x806>
					{
						CLEAR(Grip_P);
     f3c:	a0 98       	cbi	0x14, 0	; 20
						unarmed = true;
						ungripp = false;
						previous_time = millis();
     f3e:	0d db       	rcall	.-2534   	; 0x55a <_Z6millisv>
     f40:	2b 01       	movw	r4, r22
     f42:	3c 01       	movw	r6, r24
					}
					if(ungripp && (millis()-previous_time) >= 150)
					{
						CLEAR(Grip_P);
						unarmed = true;
						ungripp = false;
     f44:	1f 86       	std	Y+15, r1	; 0x0f
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <main+0x810>
     f48:	31 e0       	ldi	r19, 0x01	; 1
     f4a:	3f 87       	std	Y+15, r19	; 0x0f
						previous_time = millis();
					}
					if (unarmed && (millis()-previous_time) >= 300)
     f4c:	4c 85       	ldd	r20, Y+12	; 0x0c
     f4e:	44 23       	and	r20, r20
     f50:	a1 f0       	breq	.+40     	; 0xf7a <main+0x838>
     f52:	03 db       	rcall	.-2554   	; 0x55a <_Z6millisv>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	84 19       	sub	r24, r4
     f5a:	95 09       	sbc	r25, r5
     f5c:	a6 09       	sbc	r26, r6
     f5e:	b7 09       	sbc	r27, r7
     f60:	8c 32       	cpi	r24, 0x2C	; 44
     f62:	91 40       	sbci	r25, 0x01	; 1
     f64:	a1 05       	cpc	r26, r1
     f66:	b1 05       	cpc	r27, r1
     f68:	30 f0       	brcs	.+12     	; 0xf76 <main+0x834>
					{
						CLEAR(ShuttleCockArm_P);
     f6a:	a2 98       	cbi	0x14, 2	; 20
						throwGolden = true;
						unarmed = false;
						previous_time = millis();
     f6c:	f6 da       	rcall	.-2580   	; 0x55a <_Z6millisv>
     f6e:	2b 01       	movw	r4, r22
     f70:	3c 01       	movw	r6, r24
					}
					if (unarmed && (millis()-previous_time) >= 300)
					{
						CLEAR(ShuttleCockArm_P);
						throwGolden = true;
						unarmed = false;
     f72:	1c 86       	std	Y+12, r1	; 0x0c
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <main+0x83e>
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	fc 87       	std	Y+12, r31	; 0x0c
						previous_time = millis();
					}
						 
					if (throwGolden && (millis()-previous_time) >= 1000)
     f7a:	29 89       	ldd	r18, Y+17	; 0x11
     f7c:	22 23       	and	r18, r18
     f7e:	d1 f0       	breq	.+52     	; 0xfb4 <main+0x872>
     f80:	ec da       	rcall	.-2600   	; 0x55a <_Z6millisv>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	84 19       	sub	r24, r4
     f88:	95 09       	sbc	r25, r5
     f8a:	a6 09       	sbc	r26, r6
     f8c:	b7 09       	sbc	r27, r7
     f8e:	88 3e       	cpi	r24, 0xE8	; 232
     f90:	93 40       	sbci	r25, 0x03	; 3
     f92:	a1 05       	cpc	r26, r1
     f94:	b1 05       	cpc	r27, r1
     f96:	60 f0       	brcs	.+24     	; 0xfb0 <main+0x86e>
					{
						GoldenShuttle_count++;
     f98:	80 91 10 02 	lds	r24, 0x0210
     f9c:	90 91 11 02 	lds	r25, 0x0211
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	90 93 11 02 	sts	0x0211, r25
     fa6:	80 93 10 02 	sts	0x0210, r24
						FlyingDragon();
     faa:	9f db       	rcall	.-2242   	; 0x6ea <_Z12FlyingDragonv>
						throwGolden = false;
     fac:	19 8a       	std	Y+17, r1	; 0x11
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <main+0x872>
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	49 8b       	std	Y+17, r20	; 0x11

/***********************************************************************************************************************************/
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
     fb4:	80 91 e5 02 	lds	r24, 0x02E5
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <main+0x87c>
     fbc:	42 c0       	rjmp	.+132    	; 0x1042 <main+0x900>
     fbe:	80 91 19 02 	lds	r24, 0x0219
     fc2:	90 91 1a 02 	lds	r25, 0x021A
     fc6:	05 97       	sbiw	r24, 0x05	; 5
     fc8:	0c f4       	brge	.+2      	; 0xfcc <main+0x88a>
     fca:	11 c1       	rjmp	.+546    	; 0x11ee <main+0xaac>
     fcc:	3a c0       	rjmp	.+116    	; 0x1042 <main+0x900>
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
			{
				Speed = Speed + (dir*RAMP_STEP);
     fce:	e9 81       	ldd	r30, Y+1	; 0x01
     fd0:	8e 2f       	mov	r24, r30
     fd2:	ee 0f       	add	r30, r30
     fd4:	99 0b       	sbc	r25, r25
     fd6:	9c 01       	movw	r18, r24
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	20 91 12 02 	lds	r18, 0x0212
     fe4:	30 91 13 02 	lds	r19, 0x0213
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	90 93 13 02 	sts	0x0213, r25
     ff0:	80 93 12 02 	sts	0x0212, r24
				previous_data = E.ExtraCount;
     ff4:	5d 83       	std	Y+5, r21	; 0x05
     ff6:	4c 83       	std	Y+4, r20	; 0x04
			}
			
			Speed_PID.SetSetPoint(Speed);
     ff8:	40 91 12 02 	lds	r20, 0x0212
     ffc:	50 91 13 02 	lds	r21, 0x0213
    1000:	f5 01       	movw	r30, r10
    1002:	56 a7       	std	Z+46, r21	; 0x2e
    1004:	45 a7       	std	Z+45, r20	; 0x2d
			PIDFlag = true;
    1006:	f1 e0       	ldi	r31, 0x01	; 1
    1008:	f0 93 00 02 	sts	0x0200, r31
			if (abs(Speed) > abs(motor_speed))
    100c:	80 91 0e 02 	lds	r24, 0x020E
    1010:	90 91 0f 02 	lds	r25, 0x020F
    1014:	9a 01       	movw	r18, r20
    1016:	55 23       	and	r21, r21
    1018:	24 f4       	brge	.+8      	; 0x1022 <main+0x8e0>
    101a:	22 27       	eor	r18, r18
    101c:	33 27       	eor	r19, r19
    101e:	24 1b       	sub	r18, r20
    1020:	35 0b       	sbc	r19, r21
    1022:	ac 01       	movw	r20, r24
    1024:	99 23       	and	r25, r25
    1026:	24 f4       	brge	.+8      	; 0x1030 <main+0x8ee>
    1028:	44 27       	eor	r20, r20
    102a:	55 27       	eor	r21, r21
    102c:	48 1b       	sub	r20, r24
    102e:	59 0b       	sbc	r21, r25
    1030:	42 17       	cp	r20, r18
    1032:	53 07       	cpc	r21, r19
    1034:	34 f4       	brge	.+12     	; 0x1042 <main+0x900>
			{
				Speed = motor_speed;
    1036:	90 93 13 02 	sts	0x0213, r25
    103a:	80 93 12 02 	sts	0x0212, r24
				Ramp_up_flag = false;
    103e:	10 92 e5 02 	sts	0x02E5, r1
		}
		
		
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 8 )
    1042:	80 91 e7 02 	lds	r24, 0x02E7
    1046:	88 23       	and	r24, r24
    1048:	09 f4       	brne	.+2      	; 0x104c <main+0x90a>
    104a:	6b c0       	rjmp	.+214    	; 0x1122 <main+0x9e0>
    104c:	80 91 19 02 	lds	r24, 0x0219
    1050:	90 91 1a 02 	lds	r25, 0x021A
    1054:	08 97       	sbiw	r24, 0x08	; 8
    1056:	0c f0       	brlt	.+2      	; 0x105a <main+0x918>
    1058:	e2 c0       	rjmp	.+452    	; 0x121e <main+0xadc>
    105a:	63 c0       	rjmp	.+198    	; 0x1122 <main+0x9e0>
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
			{
				Speed = Speed - (dir*RAMP_STEP);
    105c:	29 81       	ldd	r18, Y+1	; 0x01
    105e:	82 2f       	mov	r24, r18
    1060:	22 0f       	add	r18, r18
    1062:	99 0b       	sbc	r25, r25
    1064:	9c 01       	movw	r18, r24
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	20 91 12 02 	lds	r18, 0x0212
    1072:	30 91 13 02 	lds	r19, 0x0213
    1076:	28 1b       	sub	r18, r24
    1078:	39 0b       	sbc	r19, r25
    107a:	30 93 13 02 	sts	0x0213, r19
    107e:	20 93 12 02 	sts	0x0212, r18
				previous_data = E.ExtraCount;
    1082:	5d 83       	std	Y+5, r21	; 0x05
    1084:	4c 83       	std	Y+4, r20	; 0x04
    1086:	80 91 12 02 	lds	r24, 0x0212
    108a:	90 91 13 02 	lds	r25, 0x0213
    108e:	f5 01       	movw	r30, r10
    1090:	96 a7       	std	Z+46, r25	; 0x2e
    1092:	85 a7       	std	Z+45, r24	; 0x2d
			}
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	f0 93 00 02 	sts	0x0200, r31
			
			if ((TCRTRevolutionCount >= 8) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
    109a:	80 91 19 02 	lds	r24, 0x0219
    109e:	90 91 1a 02 	lds	r25, 0x021A
    10a2:	08 97       	sbiw	r24, 0x08	; 8
    10a4:	8c f0       	brlt	.+34     	; 0x10c8 <main+0x986>
    10a6:	80 91 e8 02 	lds	r24, 0x02E8
    10aa:	88 23       	and	r24, r24
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <main+0x986>
    10ae:	80 91 e3 02 	lds	r24, 0x02E3
    10b2:	81 11       	cpse	r24, r1
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <main+0x97c>
    10b6:	80 91 e2 02 	lds	r24, 0x02E2
    10ba:	88 23       	and	r24, r24
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <main+0x986>
    10be:	80 91 e1 02 	lds	r24, 0x02E1
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <main+0x986>
    10c6:	c3 c0       	rjmp	.+390    	; 0x124e <main+0xb0c>
				/*uart0_putc('g');*/
				uart3_putc('g');
				ACKSentFlag = false;
			}
			
			if ((dir*Speed) <= 8)
    10c8:	20 91 12 02 	lds	r18, 0x0212
    10cc:	30 91 13 02 	lds	r19, 0x0213
    10d0:	49 81       	ldd	r20, Y+1	; 0x01
    10d2:	42 03       	mulsu	r20, r18
    10d4:	c0 01       	movw	r24, r0
    10d6:	43 9f       	mul	r20, r19
    10d8:	90 0d       	add	r25, r0
    10da:	11 24       	eor	r1, r1
    10dc:	09 97       	sbiw	r24, 0x09	; 9
    10de:	0c f5       	brge	.+66     	; 0x1122 <main+0x9e0>
			{
				Goflag = false;
    10e0:	10 92 e6 02 	sts	0x02E6, r1
				Throwflag = false;
    10e4:	10 92 e7 02 	sts	0x02E7, r1
				Speed = 0 ;
    10e8:	10 92 13 02 	sts	0x0213, r1
    10ec:	10 92 12 02 	sts	0x0212, r1
				Home  = true;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 e4 02 	sts	0x02E4, r24
				TCRTRevolutionCount = 0;
    10f6:	10 92 1a 02 	sts	0x021A, r1
    10fa:	10 92 19 02 	sts	0x0219, r1
				previous_data = 0;
				E.ExtraCount = 0;
    10fe:	10 92 ca 02 	sts	0x02CA, r1
    1102:	10 92 cb 02 	sts	0x02CB, r1
    1106:	10 92 cc 02 	sts	0x02CC, r1
    110a:	10 92 cd 02 	sts	0x02CD, r1
				TZ1 = false;
    110e:	10 92 e3 02 	sts	0x02E3, r1
				TZ2 = false;
    1112:	10 92 e2 02 	sts	0x02E2, r1
				TZ3 = false;
    1116:	10 92 e1 02 	sts	0x02E1, r1
				CLEAR(Plick_Plick);
    111a:	46 98       	cbi	0x08, 6	; 8
				CLEAR(Plick_Plick_2);
    111c:	40 98       	cbi	0x08, 0	; 8
				Goflag = false;
				Throwflag = false;
				Speed = 0 ;
				Home  = true;
				TCRTRevolutionCount = 0;
				previous_data = 0;
    111e:	1d 82       	std	Y+5, r1	; 0x05
    1120:	1c 82       	std	Y+4, r1	; 0x04
		
		
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
    1122:	f5 01       	movw	r30, r10
    1124:	80 81       	ld	r24, Z
    1126:	88 23       	and	r24, r24
    1128:	21 f0       	breq	.+8      	; 0x1132 <main+0x9f0>
    112a:	80 91 00 02 	lds	r24, 0x0200
    112e:	81 11       	cpse	r24, r1
    1130:	93 c0       	rjmp	.+294    	; 0x1258 <main+0xb16>
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
			Speed_PID.PID_Flag = false;
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
    1132:	80 91 4a 02 	lds	r24, 0x024A
    1136:	88 23       	and	r24, r24
    1138:	f9 f0       	breq	.+62     	; 0x1178 <main+0xa36>
    113a:	80 91 00 02 	lds	r24, 0x0200
    113e:	81 11       	cpse	r24, r1
    1140:	1b c0       	rjmp	.+54     	; 0x1178 <main+0xa36>
    1142:	9e c0       	rjmp	.+316    	; 0x1280 <main+0xb3e>
			check_homeBuffer[0] = abs(E.Count);
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
			
			if((add == 0)){
				check_timesHome += 1;
    1144:	80 91 04 02 	lds	r24, 0x0204
    1148:	90 91 05 02 	lds	r25, 0x0205
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	90 93 05 02 	sts	0x0205, r25
    1152:	80 93 04 02 	sts	0x0204, r24
			}
			else{
				check_timesHome = 0;
			}
			
			if(check_timesHome > 50){
    1156:	c3 97       	sbiw	r24, 0x33	; 51
    1158:	34 f4       	brge	.+12     	; 0x1166 <main+0xa24>
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <main+0xa32>
			
			if((add == 0)){
				check_timesHome += 1;
			}
			else{
				check_timesHome = 0;
    115c:	10 92 05 02 	sts	0x0205, r1
    1160:	10 92 04 02 	sts	0x0204, r1
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <main+0xa32>
			}
			
			if(check_timesHome > 50){
				check_timesHome = 0;
    1166:	10 92 05 02 	sts	0x0205, r1
    116a:	10 92 04 02 	sts	0x0204, r1
				ReachedHome = true;
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	f0 93 d9 02 	sts	0x02D9, r31
			}
			
			Angle_PID.PID_Flag = false;
    1174:	10 92 4a 02 	sts	0x024A, r1
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
    1178:	f4 01       	movw	r30, r8
    117a:	80 81       	ld	r24, Z
    117c:	88 23       	and	r24, r24
    117e:	21 f0       	breq	.+8      	; 0x1188 <main+0xa46>
    1180:	80 91 df 02 	lds	r24, 0x02DF
    1184:	81 11       	cpse	r24, r1
    1186:	b4 c0       	rjmp	.+360    	; 0x12f0 <main+0xbae>
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
			Geneva_PID.PID_Flag = false;
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
    1188:	80 91 e7 02 	lds	r24, 0x02E7
    118c:	81 11       	cpse	r24, r1
    118e:	ba cb       	rjmp	.-2188   	; 0x904 <main+0x1c2>
    1190:	80 91 e4 02 	lds	r24, 0x02E4
    1194:	81 11       	cpse	r24, r1
    1196:	bf c0       	rjmp	.+382    	; 0x1316 <main+0xbd4>
    1198:	b5 cb       	rjmp	.-2198   	; 0x904 <main+0x1c2>
			{
				CLEAR(ShuttleCockArm_P);
				Grabbed = true;
				previous_time = millis();
			}
			if (Grabbed && (millis()-previous_time) >= 800)
    119a:	df d9       	rcall	.-3138   	; 0x55a <_Z6millisv>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	84 19       	sub	r24, r4
    11a2:	95 09       	sbc	r25, r5
    11a4:	a6 09       	sbc	r26, r6
    11a6:	b7 09       	sbc	r27, r7
    11a8:	80 32       	cpi	r24, 0x20	; 32
    11aa:	93 40       	sbci	r25, 0x03	; 3
    11ac:	a1 05       	cpc	r26, r1
    11ae:	b1 05       	cpc	r27, r1
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <main+0xa72>
    11b2:	aa cc       	rjmp	.-1708   	; 0xb08 <main+0x3c6>
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	29 87       	std	Y+9, r18	; 0x09
    11b8:	b3 cc       	rjmp	.-1690   	; 0xb20 <main+0x3de>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
    11ba:	31 e0       	ldi	r19, 0x01	; 1
    11bc:	3a 83       	std	Y+2, r19	; 0x02
    11be:	cc cc       	rjmp	.-1640   	; 0xb58 <main+0x416>
	{
		if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !caught && !GOLDEN_1)
		{
			//  SET(ShuttleCockArm_P);
			Gripp = true;
			previous_time = millis();
    11c0:	cc d9       	rcall	.-3176   	; 0x55a <_Z6millisv>
    11c2:	2b 01       	movw	r4, r22
    11c4:	3c 01       	movw	r6, r24
		}
		/*_delay_ms(500);*/
		if (Gripp && (millis()-previous_time) >= 800)
    11c6:	c9 d9       	rcall	.-3182   	; 0x55a <_Z6millisv>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	84 19       	sub	r24, r4
    11ce:	95 09       	sbc	r25, r5
    11d0:	a6 09       	sbc	r26, r6
    11d2:	b7 09       	sbc	r27, r7
    11d4:	80 32       	cpi	r24, 0x20	; 32
    11d6:	93 40       	sbci	r25, 0x03	; 3
    11d8:	a1 05       	cpc	r26, r1
    11da:	b1 05       	cpc	r27, r1
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <main+0xa9e>
    11de:	7c cd       	rjmp	.-1288   	; 0xcd8 <main+0x596>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8e 87       	std	Y+14, r24	; 0x0e
    11e4:	98 cd       	rjmp	.-1232   	; 0xd16 <main+0x5d4>
					GOLDEN_1 = false;
				}
				  
  				if ((Speed == dir*30) && (ReachedHome))
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	91 11       	cpse	r25, r1
    11ea:	39 ce       	rjmp	.-910    	; 0xe5e <main+0x71c>
    11ec:	22 ce       	rjmp	.-956    	; 0xe32 <main+0x6f0>
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
    11ee:	40 91 ca 02 	lds	r20, 0x02CA
    11f2:	50 91 cb 02 	lds	r21, 0x02CB
    11f6:	60 91 cc 02 	lds	r22, 0x02CC
    11fa:	70 91 cd 02 	lds	r23, 0x02CD
    11fe:	9a 01       	movw	r18, r20
    1200:	ec 81       	ldd	r30, Y+4	; 0x04
    1202:	fd 81       	ldd	r31, Y+5	; 0x05
    1204:	2e 1b       	sub	r18, r30
    1206:	3f 0b       	sbc	r19, r31
    1208:	c9 01       	movw	r24, r18
    120a:	99 23       	and	r25, r25
    120c:	24 f4       	brge	.+8      	; 0x1216 <main+0xad4>
    120e:	88 27       	eor	r24, r24
    1210:	99 27       	eor	r25, r25
    1212:	82 1b       	sub	r24, r18
    1214:	93 0b       	sbc	r25, r19
    1216:	88 97       	sbiw	r24, 0x28	; 40
    1218:	0c f0       	brlt	.+2      	; 0x121c <main+0xada>
    121a:	d9 ce       	rjmp	.-590    	; 0xfce <main+0x88c>
    121c:	ed ce       	rjmp	.-550    	; 0xff8 <main+0x8b6>
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 8 )
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
    121e:	40 91 ca 02 	lds	r20, 0x02CA
    1222:	50 91 cb 02 	lds	r21, 0x02CB
    1226:	60 91 cc 02 	lds	r22, 0x02CC
    122a:	70 91 cd 02 	lds	r23, 0x02CD
    122e:	9a 01       	movw	r18, r20
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	28 1b       	sub	r18, r24
    1236:	39 0b       	sbc	r19, r25
    1238:	c9 01       	movw	r24, r18
    123a:	99 23       	and	r25, r25
    123c:	24 f4       	brge	.+8      	; 0x1246 <main+0xb04>
    123e:	88 27       	eor	r24, r24
    1240:	99 27       	eor	r25, r25
    1242:	82 1b       	sub	r24, r18
    1244:	93 0b       	sbc	r25, r19
    1246:	c2 97       	sbiw	r24, 0x32	; 50
    1248:	0c f0       	brlt	.+2      	; 0x124c <main+0xb0a>
    124a:	08 cf       	rjmp	.-496    	; 0x105c <main+0x91a>
    124c:	1c cf       	rjmp	.-456    	; 0x1086 <main+0x944>
			PIDFlag = true;
			
			if ((TCRTRevolutionCount >= 8) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
			{
				/*uart0_putc('g');*/
				uart3_putc('g');
    124e:	87 e6       	ldi	r24, 0x67	; 103
    1250:	18 d4       	rcall	.+2096   	; 0x1a82 <_Z10uart3_putch>
				ACKSentFlag = false;
    1252:	10 92 e8 02 	sts	0x02E8, r1
    1256:	38 cf       	rjmp	.-400    	; 0x10c8 <main+0x986>
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
    1258:	60 91 c2 02 	lds	r22, 0x02C2
    125c:	70 91 c3 02 	lds	r23, 0x02C3
    1260:	07 2e       	mov	r0, r23
    1262:	00 0c       	add	r0, r0
    1264:	88 0b       	sbc	r24, r24
    1266:	99 0b       	sbc	r25, r25
    1268:	25 d5       	rcall	.+2634   	; 0x1cb4 <__floatsisf>
    126a:	ab 01       	movw	r20, r22
    126c:	bc 01       	movw	r22, r24
    126e:	c5 01       	movw	r24, r10
    1270:	43 d2       	rcall	.+1158   	; 0x16f8 <_ZN3PID11Compute_PIDEf>
    1272:	ed d4       	rcall	.+2522   	; 0x1c4e <__fixsfsi>
    1274:	84 ed       	ldi	r24, 0xD4	; 212
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	9e d1       	rcall	.+828    	; 0x15b6 <_ZN5Motor11SetOcrValueEi>
			Speed_PID.PID_Flag = false;
    127a:	f5 01       	movw	r30, r10
    127c:	10 82       	st	Z, r1
    127e:	59 cf       	rjmp	.-334    	; 0x1132 <main+0x9f0>
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));
    1280:	80 eb       	ldi	r24, 0xB0	; 176
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	13 d8       	rcall	.-4058   	; 0x2ac <_ZN7Encoder17Encoder_Get_angleEv>
    1286:	bc 01       	movw	r22, r24
    1288:	99 0f       	add	r25, r25
    128a:	88 0b       	sbc	r24, r24
    128c:	99 0b       	sbc	r25, r25
    128e:	12 d5       	rcall	.+2596   	; 0x1cb4 <__floatsisf>
    1290:	ab 01       	movw	r20, r22
    1292:	bc 01       	movw	r22, r24
    1294:	8a e4       	ldi	r24, 0x4A	; 74
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	2f d2       	rcall	.+1118   	; 0x16f8 <_ZN3PID11Compute_PIDEf>
    129a:	d9 d4       	rcall	.+2482   	; 0x1c4e <__fixsfsi>
    129c:	84 ed       	ldi	r24, 0xD4	; 212
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	8a d1       	rcall	.+788    	; 0x15b6 <_ZN5Motor11SetOcrValueEi>

			check_homeBuffer[3] = check_homeBuffer[2];
    12a2:	f1 01       	movw	r30, r2
    12a4:	24 81       	ldd	r18, Z+4	; 0x04
    12a6:	35 81       	ldd	r19, Z+5	; 0x05
    12a8:	37 83       	std	Z+7, r19	; 0x07
    12aa:	26 83       	std	Z+6, r18	; 0x06
			check_homeBuffer[2] = check_homeBuffer[1];
    12ac:	42 81       	ldd	r20, Z+2	; 0x02
    12ae:	53 81       	ldd	r21, Z+3	; 0x03
    12b0:	55 83       	std	Z+5, r21	; 0x05
    12b2:	44 83       	std	Z+4, r20	; 0x04
			check_homeBuffer[1] = check_homeBuffer[0];
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	73 83       	std	Z+3, r23	; 0x03
    12ba:	62 83       	std	Z+2, r22	; 0x02
			check_homeBuffer[0] = abs(E.Count);
    12bc:	80 91 c6 02 	lds	r24, 0x02C6
    12c0:	90 91 c7 02 	lds	r25, 0x02C7
    12c4:	99 23       	and	r25, r25
    12c6:	1c f4       	brge	.+6      	; 0x12ce <main+0xb8c>
    12c8:	91 95       	neg	r25
    12ca:	81 95       	neg	r24
    12cc:	91 09       	sbc	r25, r1
    12ce:	f1 01       	movw	r30, r2
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	80 83       	st	Z, r24
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
    12d4:	86 0f       	add	r24, r22
    12d6:	97 1f       	adc	r25, r23
    12d8:	48 0f       	add	r20, r24
    12da:	59 1f       	adc	r21, r25
    12dc:	24 0f       	add	r18, r20
    12de:	35 1f       	adc	r19, r21
    12e0:	30 93 03 02 	sts	0x0203, r19
    12e4:	20 93 02 02 	sts	0x0202, r18
			
			if((add == 0)){
    12e8:	23 2b       	or	r18, r19
    12ea:	09 f4       	brne	.+2      	; 0x12ee <main+0xbac>
    12ec:	2b cf       	rjmp	.-426    	; 0x1144 <main+0xa02>
    12ee:	36 cf       	rjmp	.-404    	; 0x115c <main+0xa1a>
			Angle_PID.PID_Flag = false;
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
		{
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
    12f0:	88 ea       	ldi	r24, 0xA8	; 168
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	59 d8       	rcall	.-3918   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
    12f6:	bc 01       	movw	r22, r24
    12f8:	99 0f       	add	r25, r25
    12fa:	88 0b       	sbc	r24, r24
    12fc:	99 0b       	sbc	r25, r25
    12fe:	da d4       	rcall	.+2484   	; 0x1cb4 <__floatsisf>
    1300:	ab 01       	movw	r20, r22
    1302:	bc 01       	movw	r22, r24
    1304:	c4 01       	movw	r24, r8
    1306:	f8 d1       	rcall	.+1008   	; 0x16f8 <_ZN3PID11Compute_PIDEf>
    1308:	a2 d4       	rcall	.+2372   	; 0x1c4e <__fixsfsi>
    130a:	85 ed       	ldi	r24, 0xD5	; 213
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	8c d8       	rcall	.-3816   	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
			Geneva_PID.PID_Flag = false;
    1310:	f4 01       	movw	r30, r8
    1312:	10 82       	st	Z, r1
    1314:	39 cf       	rjmp	.-398    	; 0x1188 <main+0xa46>
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
		{
			GoToHome();
    1316:	9e d9       	rcall	.-3268   	; 0x654 <_Z8GoToHomev>
			Speed = dir*30;
    1318:	2e e1       	ldi	r18, 0x1E	; 30
    131a:	39 81       	ldd	r19, Y+1	; 0x01
    131c:	32 03       	mulsu	r19, r18
    131e:	c0 01       	movw	r24, r0
    1320:	11 24       	eor	r1, r1
    1322:	90 93 13 02 	sts	0x0213, r25
    1326:	80 93 12 02 	sts	0x0212, r24
			Home = false;
    132a:	10 92 e4 02 	sts	0x02E4, r1
    132e:	ea ca       	rjmp	.-2604   	; 0x904 <main+0x1c2>
						 Gripp = false;
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
    1330:	4b 85       	ldd	r20, Y+11	; 0x0b
    1332:	44 23       	and	r20, r20
    1334:	09 f4       	brne	.+2      	; 0x1338 <main+0xbf6>
    1336:	c5 cd       	rjmp	.-1142   	; 0xec2 <main+0x780>
    1338:	ad cd       	rjmp	.-1190   	; 0xe94 <main+0x752>

0000133a <__vector_21>:
}

/*******************************************ISR Section************************************************************/

ISR(TIMER0_COMPA_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	0b b6       	in	r0, 0x3b	; 59
    1346:	0f 92       	push	r0
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	Speed_PID.PID_Flag = true;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 79 02 	sts	0x0279, r24
	Angle_PID.PID_Flag = true;
    1366:	80 93 4a 02 	sts	0x024A, r24
	Geneva_PID.PID_Flag = true;
    136a:	80 93 1b 02 	sts	0x021B, r24
	E.Encoder_update_Speed();
    136e:	80 eb       	ldi	r24, 0xB0	; 176
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7Encoder20Encoder_update_SpeedEv>
}
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0b be       	out	0x3b, r0	; 59
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	0f 90       	pop	r0
    1398:	1f 90       	pop	r1
    139a:	18 95       	reti

0000139c <__vector_1>:

ISR(ENCODER_INTERRUPT_VECT)
{
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	0b b6       	in	r0, 0x3b	; 59
    13a8:	0f 92       	push	r0
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
	E.Encoder_Increase_Pulse_Counter();	
    13c2:	80 eb       	ldi	r24, 0xB0	; 176
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	0e 94 19 01 	call	0x232	; 0x232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>
}
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0b be       	out	0x3b, r0	; 59
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <__vector_3>:


ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
    13f0:	78 94       	sei
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	0b b6       	in	r0, 0x3b	; 59
    13fe:	0f 92       	push	r0
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
	E.Angle_count = 0;
    1408:	10 92 cf 02 	sts	0x02CF, r1
    140c:	10 92 ce 02 	sts	0x02CE, r1
	if(Goflag && (TZ1||TZ2))
    1410:	80 91 e6 02 	lds	r24, 0x02E6
    1414:	88 23       	and	r24, r24
    1416:	f9 f0       	breq	.+62     	; 0x1456 <__vector_3+0x66>
    1418:	80 91 e3 02 	lds	r24, 0x02E3
    141c:	81 11       	cpse	r24, r1
    141e:	10 c0       	rjmp	.+32     	; 0x1440 <__vector_3+0x50>
    1420:	80 91 e2 02 	lds	r24, 0x02E2
    1424:	81 11       	cpse	r24, r1
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <__vector_3+0x50>
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <__vector_3+0x66>
	{
		TCRTRevolutionCount++;
		if (TCRTRevolutionCount == 5)
		{
			CLEAR(Pneumatic);
    142a:	eb e0       	ldi	r30, 0x0B	; 11
    142c:	f1 e0       	ldi	r31, 0x01	; 1
    142e:	80 81       	ld	r24, Z
    1430:	8e 7f       	andi	r24, 0xFE	; 254
    1432:	80 83       	st	Z, r24
			Throwflag = true;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 e7 02 	sts	0x02E7, r24
			ACKSentFlag = true;
    143a:	80 93 e8 02 	sts	0x02E8, r24
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <__vector_3+0x66>
ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if(Goflag && (TZ1||TZ2))
	{
		TCRTRevolutionCount++;
    1440:	80 91 19 02 	lds	r24, 0x0219
    1444:	90 91 1a 02 	lds	r25, 0x021A
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	90 93 1a 02 	sts	0x021A, r25
    144e:	80 93 19 02 	sts	0x0219, r24
		if (TCRTRevolutionCount == 5)
    1452:	05 97       	sbiw	r24, 0x05	; 5
    1454:	51 f3       	breq	.-44     	; 0x142a <__vector_3+0x3a>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    1456:	ff 91       	pop	r31
    1458:	ef 91       	pop	r30
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	0f 90       	pop	r0
    1460:	0b be       	out	0x3b, r0	; 59
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_2>:

ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
    146c:	78 94       	sei
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	0b b6       	in	r0, 0x3b	; 59
    147a:	0f 92       	push	r0
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
	E.Angle_count = 0;
    1484:	10 92 cf 02 	sts	0x02CF, r1
    1488:	10 92 ce 02 	sts	0x02CE, r1
	if (Goflag && TZ3)
    148c:	80 91 e6 02 	lds	r24, 0x02E6
    1490:	88 23       	and	r24, r24
    1492:	d9 f0       	breq	.+54     	; 0x14ca <__vector_2+0x5e>
    1494:	80 91 e1 02 	lds	r24, 0x02E1
    1498:	81 11       	cpse	r24, r1
    149a:	0c c0       	rjmp	.+24     	; 0x14b4 <__vector_2+0x48>
    149c:	16 c0       	rjmp	.+44     	; 0x14ca <__vector_2+0x5e>
	{
		TCRTRevolutionCount++;
		
		if (TCRTRevolutionCount == 6)
		{
			CLEAR(Pneumatic);
    149e:	eb e0       	ldi	r30, 0x0B	; 11
    14a0:	f1 e0       	ldi	r31, 0x01	; 1
    14a2:	80 81       	ld	r24, Z
    14a4:	8e 7f       	andi	r24, 0xFE	; 254
    14a6:	80 83       	st	Z, r24
			Throwflag = true;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 e7 02 	sts	0x02E7, r24
			ACKSentFlag = true;
    14ae:	80 93 e8 02 	sts	0x02E8, r24
    14b2:	0b c0       	rjmp	.+22     	; 0x14ca <__vector_2+0x5e>
ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if (Goflag && TZ3)
	{
		TCRTRevolutionCount++;
    14b4:	80 91 19 02 	lds	r24, 0x0219
    14b8:	90 91 1a 02 	lds	r25, 0x021A
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	90 93 1a 02 	sts	0x021A, r25
    14c2:	80 93 19 02 	sts	0x0219, r24
		
		if (TCRTRevolutionCount == 6)
    14c6:	06 97       	sbiw	r24, 0x06	; 6
    14c8:	51 f3       	breq	.-44     	; 0x149e <__vector_2+0x32>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	0f 90       	pop	r0
    14d4:	0b be       	out	0x3b, r0	; 59
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_5>:

ISR(GENEVA_ENCODER_INT_vect)
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	0b b6       	in	r0, 0x3b	; 59
    14ec:	0f 92       	push	r0
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
	if (READ(ENCODERB))
    14f6:	01 9b       	sbis	0x00, 1	; 0
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <__vector_5+0x2a>
		long count;
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
    14fa:	e8 ea       	ldi	r30, 0xA8	; 168
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
    1508:	09 c0       	rjmp	.+18     	; 0x151c <__vector_5+0x3c>
	{
		E1.Inc_Count();
	}
	else if (!READ(ENCODERB))
    150a:	01 99       	sbic	0x00, 1	; 0
    150c:	07 c0       	rjmp	.+14     	; 0x151c <__vector_5+0x3c>
		inline void Dcr_Count(){Encoder_Count--;};
    150e:	e8 ea       	ldi	r30, 0xA8	; 168
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
	{
		E1.Dcr_Count();
	}
	
}
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	0f 90       	pop	r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <_GLOBAL__sub_I_timer2_millis>:
#define MAX_SPEED		120
#define RAMP_STEP		3

GenevaMotor G;
Motor   M;
Encoder E;
    1532:	80 eb       	ldi	r24, 0xB0	; 176
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN7EncoderC1Ev>
GenevaEncoder E1;
    153a:	88 ea       	ldi	r24, 0xA8	; 168
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_ZN13GenevaEncoderC1Ev>
    1542:	08 95       	ret

00001544 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
		OUTPUT(DD_F1);
    1544:	e1 e0       	ldi	r30, 0x01	; 1
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	80 81       	ld	r24, Z
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    154e:	80 81       	ld	r24, Z
    1550:	80 64       	ori	r24, 0x40	; 64
    1552:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    1554:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );												    // Clear on Compare Match
    1556:	e0 e8       	ldi	r30, 0x80	; 128
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	82 62       	ori	r24, 0x22	; 34
    155e:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    1560:	e1 e8       	ldi	r30, 0x81	; 129
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8a 61       	ori	r24, 0x1A	; 26
    1568:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    156a:	89 ef       	ldi	r24, 0xF9	; 249
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 87 00 	sts	0x0087, r25
    1572:	80 93 86 00 	sts	0x0086, r24
    1576:	08 95       	ret

00001578 <_ZN5Motor19SetForwardDirectionEv>:
}

void Motor::SetForwardDirection()
{
	SET (DD_F1);
    1578:	e2 e0       	ldi	r30, 0x02	; 2
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	80 81       	ld	r24, Z
    157e:	80 62       	ori	r24, 0x20	; 32
    1580:	80 83       	st	Z, r24
	CLEAR	(DD_B1);
    1582:	80 81       	ld	r24, Z
    1584:	8f 7b       	andi	r24, 0xBF	; 191
    1586:	80 83       	st	Z, r24
    1588:	08 95       	ret

0000158a <_ZN5Motor19SetReverseDirectionEv>:
}
void Motor::SetReverseDirection()
{
	CLEAR	(DD_F1);
    158a:	e2 e0       	ldi	r30, 0x02	; 2
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	80 81       	ld	r24, Z
    1590:	8f 7d       	andi	r24, 0xDF	; 223
    1592:	80 83       	st	Z, r24
	SET (DD_B1);
    1594:	80 81       	ld	r24, Z
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	80 83       	st	Z, r24
    159a:	08 95       	ret

0000159c <_ZN5Motor9StopMotorEv>:
}

void Motor::StopMotor()
{
	SET	(DD_F1);
    159c:	e2 e0       	ldi	r30, 0x02	; 2
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	80 81       	ld	r24, Z
    15a2:	80 62       	ori	r24, 0x20	; 32
    15a4:	80 83       	st	Z, r24
	SET	(DD_B1);
    15a6:	80 81       	ld	r24, Z
    15a8:	80 64       	ori	r24, 0x40	; 64
    15aa:	80 83       	st	Z, r24

	PWM_OCR1 = 0;	
    15ac:	10 92 8b 00 	sts	0x008B, r1
    15b0:	10 92 8a 00 	sts	0x008A, r1
    15b4:	08 95       	ret

000015b6 <_ZN5Motor11SetOcrValueEi>:
}


void Motor::SetOcrValue(int Ocr)
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	8c 01       	movw	r16, r24
    15c0:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    15c2:	1c 16       	cp	r1, r28
    15c4:	1d 06       	cpc	r1, r29
    15c6:	0c f4       	brge	.+2      	; 0x15ca <_ZN5Motor11SetOcrValueEi+0x14>
		//SetReverseDirection();
		SetForwardDirection();
    15c8:	d7 df       	rcall	.-82     	; 0x1578 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    15ca:	c9 3f       	cpi	r28, 0xF9	; 249
    15cc:	d1 05       	cpc	r29, r1
    15ce:	44 f4       	brge	.+16     	; 0x15e0 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
		
	if(Ocr < 0)
    15d0:	dd 23       	and	r29, r29
    15d2:	44 f4       	brge	.+16     	; 0x15e4 <_ZN5Motor11SetOcrValueEi+0x2e>
	 {
		Ocr = -Ocr;
    15d4:	d1 95       	neg	r29
    15d6:	c1 95       	neg	r28
    15d8:	d1 09       	sbc	r29, r1
		//SetForwardDirection();
		SetReverseDirection();   
    15da:	c8 01       	movw	r24, r16
    15dc:	d6 df       	rcall	.-84     	; 0x158a <_ZN5Motor19SetReverseDirectionEv>
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
		//SetReverseDirection();
		SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    15e0:	c9 ef       	ldi	r28, 0xF9	; 249
    15e2:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Ocr = -Ocr;
		//SetForwardDirection();
		SetReverseDirection();   
	 }
	PWM_OCR1	= Ocr;
    15e4:	d0 93 8b 00 	sts	0x008B, r29
    15e8:	c0 93 8a 00 	sts	0x008A, r28
		
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <_ZN5Motor10InitialiseEv>:
#include "Motor.h"



void Motor::Initialise()
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ec 01       	movw	r28, r24
	InitPWM();
    15fc:	a3 df       	rcall	.-186    	; 0x1544 <_ZN5Motor7InitPWMEv>

	StopMotor();
    15fe:	ce 01       	movw	r24, r28
    1600:	cd df       	rcall	.-102    	; 0x159c <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	ce 01       	movw	r24, r28
    1608:	d6 df       	rcall	.-84     	; 0x15b6 <_ZN5Motor11SetOcrValueEi>

}
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <_Z9constrainRfff>:
 */  
#include "PID.h"
#include "headers.h"

void constrain(float &val,float minVal,float maxVal)
{
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	4a 01       	movw	r8, r20
    162c:	5b 01       	movw	r10, r22
    162e:	68 01       	movw	r12, r16
    1630:	79 01       	movw	r14, r18
	if(val < minVal)
    1632:	9a 01       	movw	r18, r20
    1634:	ab 01       	movw	r20, r22
    1636:	68 81       	ld	r22, Y
    1638:	79 81       	ldd	r23, Y+1	; 0x01
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	9b d2       	rcall	.+1334   	; 0x1b76 <__cmpsf2>
    1640:	88 23       	and	r24, r24
    1642:	24 f4       	brge	.+8      	; 0x164c <_Z9constrainRfff+0x3c>
		val = minVal;
    1644:	88 82       	st	Y, r8
    1646:	99 82       	std	Y+1, r9	; 0x01
    1648:	aa 82       	std	Y+2, r10	; 0x02
    164a:	bb 82       	std	Y+3, r11	; 0x03
	if(val > maxVal)
    164c:	a7 01       	movw	r20, r14
    164e:	96 01       	movw	r18, r12
    1650:	68 81       	ld	r22, Y
    1652:	79 81       	ldd	r23, Y+1	; 0x01
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	dd d3       	rcall	.+1978   	; 0x1e14 <__gesf2>
    165a:	18 16       	cp	r1, r24
    165c:	24 f4       	brge	.+8      	; 0x1666 <_Z9constrainRfff+0x56>
		val = maxVal;
    165e:	c8 82       	st	Y, r12
    1660:	d9 82       	std	Y+1, r13	; 0x01
    1662:	ea 82       	std	Y+2, r14	; 0x02
    1664:	fb 82       	std	Y+3, r15	; 0x03
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	9f 90       	pop	r9
    167c:	8f 90       	pop	r8
    167e:	08 95       	ret

00001680 <_ZN3PID10InitializeEv>:

void PID::Initialize()
{
    1680:	fc 01       	movw	r30, r24
	kp         =  0;
    1682:	11 82       	std	Z+1, r1	; 0x01
    1684:	12 82       	std	Z+2, r1	; 0x02
    1686:	13 82       	std	Z+3, r1	; 0x03
    1688:	14 82       	std	Z+4, r1	; 0x04
	ki         =  0;
    168a:	15 82       	std	Z+5, r1	; 0x05
    168c:	16 82       	std	Z+6, r1	; 0x06
    168e:	17 82       	std	Z+7, r1	; 0x07
    1690:	10 86       	std	Z+8, r1	; 0x08
	kd         =  0;
    1692:	11 86       	std	Z+9, r1	; 0x09
    1694:	12 86       	std	Z+10, r1	; 0x0a
    1696:	13 86       	std	Z+11, r1	; 0x0b
    1698:	14 86       	std	Z+12, r1	; 0x0c
	error      =  0;
    169a:	11 8e       	std	Z+25, r1	; 0x19
    169c:	12 8e       	std	Z+26, r1	; 0x1a
    169e:	13 8e       	std	Z+27, r1	; 0x1b
    16a0:	14 8e       	std	Z+28, r1	; 0x1c
	errSum     =  0;
    16a2:	15 86       	std	Z+13, r1	; 0x0d
    16a4:	16 86       	std	Z+14, r1	; 0x0e
    16a6:	17 86       	std	Z+15, r1	; 0x0f
    16a8:	10 8a       	std	Z+16, r1	; 0x10
	lastinput  =  0;
    16aa:	15 a2       	std	Z+37, r1	; 0x25
    16ac:	16 a2       	std	Z+38, r1	; 0x26
    16ae:	17 a2       	std	Z+39, r1	; 0x27
    16b0:	10 a6       	std	Z+40, r1	; 0x28
	offset     =  0;
    16b2:	11 a6       	std	Z+41, r1	; 0x29
    16b4:	12 a6       	std	Z+42, r1	; 0x2a
    16b6:	13 a6       	std	Z+43, r1	; 0x2b
    16b8:	14 a6       	std	Z+44, r1	; 0x2c
	setPoint   =  0;
    16ba:	16 a6       	std	Z+46, r1	; 0x2e
    16bc:	15 a6       	std	Z+45, r1	; 0x2d
	PID_Flag   =  true;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	80 83       	st	Z, r24
    16c2:	08 95       	ret

000016c4 <_ZN3PID7Set_PIDEfff>:
}
void PID::Set_PID(float KP,float KI,float KD)
{
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	fc 01       	movw	r30, r24
	kp = KP;
    16d2:	41 83       	std	Z+1, r20	; 0x01
    16d4:	52 83       	std	Z+2, r21	; 0x02
    16d6:	63 83       	std	Z+3, r22	; 0x03
    16d8:	74 83       	std	Z+4, r23	; 0x04
	ki = KI;
    16da:	05 83       	std	Z+5, r16	; 0x05
    16dc:	16 83       	std	Z+6, r17	; 0x06
    16de:	27 83       	std	Z+7, r18	; 0x07
    16e0:	30 87       	std	Z+8, r19	; 0x08
	kd = KD;
    16e2:	c1 86       	std	Z+9, r12	; 0x09
    16e4:	d2 86       	std	Z+10, r13	; 0x0a
    16e6:	e3 86       	std	Z+11, r14	; 0x0b
    16e8:	f4 86       	std	Z+12, r15	; 0x0c
}
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	08 95       	ret

000016f8 <_ZN3PID11Compute_PIDEf>:
float PID::Compute_PID(float input)
{
    16f8:	4f 92       	push	r4
    16fa:	5f 92       	push	r5
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	6a 01       	movw	r12, r20
    171c:	7b 01       	movw	r14, r22
		error   = setPoint - input;
    171e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1720:	7e a5       	ldd	r23, Y+46	; 0x2e
    1722:	07 2e       	mov	r0, r23
    1724:	00 0c       	add	r0, r0
    1726:	88 0b       	sbc	r24, r24
    1728:	99 0b       	sbc	r25, r25
    172a:	c4 d2       	rcall	.+1416   	; 0x1cb4 <__floatsisf>
    172c:	a7 01       	movw	r20, r14
    172e:	96 01       	movw	r18, r12
    1730:	bd d1       	rcall	.+890    	; 0x1aac <__subsf3>
    1732:	4b 01       	movw	r8, r22
    1734:	5c 01       	movw	r10, r24
    1736:	69 8f       	std	Y+25, r22	; 0x19
    1738:	7a 8f       	std	Y+26, r23	; 0x1a
    173a:	8b 8f       	std	Y+27, r24	; 0x1b
    173c:	9c 8f       	std	Y+28, r25	; 0x1c
 		Iterm += (ki*error);
    173e:	2d 81       	ldd	r18, Y+5	; 0x05
    1740:	3e 81       	ldd	r19, Y+6	; 0x06
    1742:	4f 81       	ldd	r20, Y+7	; 0x07
    1744:	58 85       	ldd	r21, Y+8	; 0x08
    1746:	6a d3       	rcall	.+1748   	; 0x1e1c <__mulsf3>
    1748:	29 a1       	ldd	r18, Y+33	; 0x21
    174a:	3a a1       	ldd	r19, Y+34	; 0x22
    174c:	4b a1       	ldd	r20, Y+35	; 0x23
    174e:	5c a1       	ldd	r21, Y+36	; 0x24
    1750:	ae d1       	rcall	.+860    	; 0x1aae <__addsf3>
    1752:	2b 01       	movw	r4, r22
    1754:	3c 01       	movw	r6, r24
    1756:	69 a3       	std	Y+33, r22	; 0x21
    1758:	7a a3       	std	Y+34, r23	; 0x22
    175a:	8b a3       	std	Y+35, r24	; 0x23
    175c:	9c a3       	std	Y+36, r25	; 0x24

		float dErr = (input - lastinput);
		
		output = kp * error + Iterm - kd * dErr;
    175e:	29 81       	ldd	r18, Y+1	; 0x01
    1760:	3a 81       	ldd	r19, Y+2	; 0x02
    1762:	4b 81       	ldd	r20, Y+3	; 0x03
    1764:	5c 81       	ldd	r21, Y+4	; 0x04
    1766:	c5 01       	movw	r24, r10
    1768:	b4 01       	movw	r22, r8
    176a:	58 d3       	rcall	.+1712   	; 0x1e1c <__mulsf3>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	c3 01       	movw	r24, r6
    1772:	b2 01       	movw	r22, r4
    1774:	9c d1       	rcall	.+824    	; 0x1aae <__addsf3>
    1776:	4b 01       	movw	r8, r22
    1778:	5c 01       	movw	r10, r24
float PID::Compute_PID(float input)
{
		error   = setPoint - input;
 		Iterm += (ki*error);

		float dErr = (input - lastinput);
    177a:	2d a1       	ldd	r18, Y+37	; 0x25
    177c:	3e a1       	ldd	r19, Y+38	; 0x26
    177e:	4f a1       	ldd	r20, Y+39	; 0x27
    1780:	58 a5       	ldd	r21, Y+40	; 0x28
    1782:	c7 01       	movw	r24, r14
    1784:	b6 01       	movw	r22, r12
    1786:	92 d1       	rcall	.+804    	; 0x1aac <__subsf3>
		
		output = kp * error + Iterm - kd * dErr;
    1788:	29 85       	ldd	r18, Y+9	; 0x09
    178a:	3a 85       	ldd	r19, Y+10	; 0x0a
    178c:	4b 85       	ldd	r20, Y+11	; 0x0b
    178e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1790:	45 d3       	rcall	.+1674   	; 0x1e1c <__mulsf3>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	c5 01       	movw	r24, r10
    1798:	b4 01       	movw	r22, r8
    179a:	88 d1       	rcall	.+784    	; 0x1aac <__subsf3>
    179c:	6d 8f       	std	Y+29, r22	; 0x1d
    179e:	7e 8f       	std	Y+30, r23	; 0x1e
    17a0:	8f 8f       	std	Y+31, r24	; 0x1f
    17a2:	98 a3       	std	Y+32, r25	; 0x20
	
		constrain(output,minOut,maxOut);
    17a4:	09 89       	ldd	r16, Y+17	; 0x11
    17a6:	1a 89       	ldd	r17, Y+18	; 0x12
    17a8:	2b 89       	ldd	r18, Y+19	; 0x13
    17aa:	3c 89       	ldd	r19, Y+20	; 0x14
    17ac:	4d 89       	ldd	r20, Y+21	; 0x15
    17ae:	5e 89       	ldd	r21, Y+22	; 0x16
    17b0:	6f 89       	ldd	r22, Y+23	; 0x17
    17b2:	78 8d       	ldd	r23, Y+24	; 0x18
    17b4:	ce 01       	movw	r24, r28
    17b6:	4d 96       	adiw	r24, 0x1d	; 29
    17b8:	2b df       	rcall	.-426    	; 0x1610 <_Z9constrainRfff>
		//Remember some variables for next time
		lastinput = input;
    17ba:	cd a2       	std	Y+37, r12	; 0x25
    17bc:	de a2       	std	Y+38, r13	; 0x26
    17be:	ef a2       	std	Y+39, r14	; 0x27
    17c0:	f8 a6       	std	Y+40, r15	; 0x28

	return output;
    17c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    17c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c8:	98 a1       	ldd	r25, Y+32	; 0x20
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	6f 90       	pop	r6
    17e6:	5f 90       	pop	r5
    17e8:	4f 90       	pop	r4
    17ea:	08 95       	ret

000017ec <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	0b b6       	in	r0, 0x3b	; 59
    17f8:	0f 92       	push	r0
    17fa:	2f 93       	push	r18
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	80 91 c0 00 	lds	r24, 0x00C0
    1808:	20 91 c6 00 	lds	r18, 0x00C6
    180c:	88 71       	andi	r24, 0x18	; 24
    180e:	e0 91 7d 03 	lds	r30, 0x037D
    1812:	ef 5f       	subi	r30, 0xFF	; 255
    1814:	ef 71       	andi	r30, 0x1F	; 31
    1816:	90 91 7c 03 	lds	r25, 0x037C
    181a:	e9 17       	cp	r30, r25
    181c:	39 f0       	breq	.+14     	; 0x182c <__vector_25+0x40>
    181e:	e0 93 7d 03 	sts	0x037D, r30
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	e0 58       	subi	r30, 0x80	; 128
    1826:	fc 4f       	sbci	r31, 0xFC	; 252
    1828:	20 83       	st	Z, r18
    182a:	01 c0       	rjmp	.+2      	; 0x182e <__vector_25+0x42>
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	80 93 7b 03 	sts	0x037B, r24
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0b be       	out	0x3b, r0	; 59
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <__vector_26>:
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	0b b6       	in	r0, 0x3b	; 59
    1856:	0f 92       	push	r0
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	ef 93       	push	r30
    185e:	ff 93       	push	r31
    1860:	90 91 7f 03 	lds	r25, 0x037F
    1864:	80 91 7e 03 	lds	r24, 0x037E
    1868:	98 17       	cp	r25, r24
    186a:	69 f0       	breq	.+26     	; 0x1886 <__vector_26+0x3c>
    186c:	e0 91 7e 03 	lds	r30, 0x037E
    1870:	ef 5f       	subi	r30, 0xFF	; 255
    1872:	ef 71       	andi	r30, 0x1F	; 31
    1874:	e0 93 7e 03 	sts	0x037E, r30
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	e0 56       	subi	r30, 0x60	; 96
    187c:	fc 4f       	sbci	r31, 0xFC	; 252
    187e:	80 81       	ld	r24, Z
    1880:	80 93 c6 00 	sts	0x00C6, r24
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <__vector_26+0x46>
    1886:	e1 ec       	ldi	r30, 0xC1	; 193
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7d       	andi	r24, 0xDF	; 223
    188e:	80 83       	st	Z, r24
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	0f 90       	pop	r0
    189a:	0b be       	out	0x3b, r0	; 59
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <__vector_51>:
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	0b b6       	in	r0, 0x3b	; 59
    18b2:	0f 92       	push	r0
    18b4:	2f 93       	push	r18
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	80 91 d0 00 	lds	r24, 0x00D0
    18c2:	20 91 d6 00 	lds	r18, 0x00D6
    18c6:	88 71       	andi	r24, 0x18	; 24
    18c8:	e0 91 38 03 	lds	r30, 0x0338
    18cc:	ef 5f       	subi	r30, 0xFF	; 255
    18ce:	ef 71       	andi	r30, 0x1F	; 31
    18d0:	90 91 37 03 	lds	r25, 0x0337
    18d4:	e9 17       	cp	r30, r25
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <__vector_51+0x40>
    18d8:	e0 93 38 03 	sts	0x0338, r30
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	e5 5c       	subi	r30, 0xC5	; 197
    18e0:	fc 4f       	sbci	r31, 0xFC	; 252
    18e2:	20 83       	st	Z, r18
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <__vector_51+0x42>
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	80 93 36 03 	sts	0x0336, r24
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0b be       	out	0x3b, r0	; 59
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_52>:
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	0b b6       	in	r0, 0x3b	; 59
    1910:	0f 92       	push	r0
    1912:	8f 93       	push	r24
    1914:	9f 93       	push	r25
    1916:	ef 93       	push	r30
    1918:	ff 93       	push	r31
    191a:	90 91 3a 03 	lds	r25, 0x033A
    191e:	80 91 39 03 	lds	r24, 0x0339
    1922:	98 17       	cp	r25, r24
    1924:	69 f0       	breq	.+26     	; 0x1940 <__vector_52+0x3c>
    1926:	e0 91 39 03 	lds	r30, 0x0339
    192a:	ef 5f       	subi	r30, 0xFF	; 255
    192c:	ef 71       	andi	r30, 0x1F	; 31
    192e:	e0 93 39 03 	sts	0x0339, r30
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	e5 5a       	subi	r30, 0xA5	; 165
    1936:	fc 4f       	sbci	r31, 0xFC	; 252
    1938:	80 81       	ld	r24, Z
    193a:	80 93 d6 00 	sts	0x00D6, r24
    193e:	05 c0       	rjmp	.+10     	; 0x194a <__vector_52+0x46>
    1940:	e1 ed       	ldi	r30, 0xD1	; 209
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8f 7d       	andi	r24, 0xDF	; 223
    1948:	80 83       	st	Z, r24
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	0f 90       	pop	r0
    1954:	0b be       	out	0x3b, r0	; 59
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	0f 90       	pop	r0
    195c:	1f 90       	pop	r1
    195e:	18 95       	reti

00001960 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    1960:	1f 92       	push	r1
    1962:	0f 92       	push	r0
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	0f 92       	push	r0
    1968:	11 24       	eor	r1, r1
    196a:	0b b6       	in	r0, 0x3b	; 59
    196c:	0f 92       	push	r0
    196e:	2f 93       	push	r18
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    1978:	80 91 30 01 	lds	r24, 0x0130
	data = UART3_DATA;
    197c:	20 91 36 01 	lds	r18, 0x0136
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    1980:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    1982:	e0 91 f3 02 	lds	r30, 0x02F3
    1986:	ef 5f       	subi	r30, 0xFF	; 255
    1988:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    198a:	90 91 f2 02 	lds	r25, 0x02F2
    198e:	e9 17       	cp	r30, r25
    1990:	39 f0       	breq	.+14     	; 0x19a0 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    1992:	e0 93 f3 02 	sts	0x02F3, r30
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	ea 50       	subi	r30, 0x0A	; 10
    199a:	fd 4f       	sbci	r31, 0xFD	; 253
    199c:	20 83       	st	Z, r18
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    19a0:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    19a2:	80 93 f1 02 	sts	0x02F1, r24
}
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	2f 91       	pop	r18
    19b0:	0f 90       	pop	r0
    19b2:	0b be       	out	0x3b, r0	; 59
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	0b b6       	in	r0, 0x3b	; 59
    19ca:	0f 92       	push	r0
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    19d4:	90 91 f5 02 	lds	r25, 0x02F5
    19d8:	80 91 f4 02 	lds	r24, 0x02F4
    19dc:	98 17       	cp	r25, r24
    19de:	69 f0       	breq	.+26     	; 0x19fa <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    19e0:	e0 91 f4 02 	lds	r30, 0x02F4
    19e4:	ef 5f       	subi	r30, 0xFF	; 255
    19e6:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    19e8:	e0 93 f4 02 	sts	0x02F4, r30
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	ea 5e       	subi	r30, 0xEA	; 234
    19f0:	fc 4f       	sbci	r31, 0xFC	; 252
    19f2:	80 81       	ld	r24, Z
    19f4:	80 93 36 01 	sts	0x0136, r24
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    19fa:	e1 e3       	ldi	r30, 0x31	; 49
    19fc:	f1 e0       	ldi	r31, 0x01	; 1
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7d       	andi	r24, 0xDF	; 223
    1a02:	80 83       	st	Z, r24
	}
}
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	0f 90       	pop	r0
    1a0e:	0b be       	out	0x3b, r0	; 59
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    1a1a:	10 92 f5 02 	sts	0x02F5, r1
	UART3_TxTail = 0;
    1a1e:	10 92 f4 02 	sts	0x02F4, r1
	UART3_RxHead = 0;
    1a22:	10 92 f3 02 	sts	0x02F3, r1
	UART3_RxTail = 0;
    1a26:	10 92 f2 02 	sts	0x02F2, r1


	/* Set baud rate */
	if (baudrate & 0x8000)
    1a2a:	99 23       	and	r25, r25
    1a2c:	24 f4       	brge	.+8      	; 0x1a36 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    1a2e:	26 e0       	ldi	r18, 0x06	; 6
    1a30:	20 93 30 01 	sts	0x0130, r18
		baudrate &= ~0x8000;
    1a34:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    1a36:	90 93 35 01 	sts	0x0135, r25
	UBRR3L = (unsigned char)baudrate;
    1a3a:	80 93 34 01 	sts	0x0134, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    1a3e:	88 e9       	ldi	r24, 0x98	; 152
    1a40:	80 93 31 01 	sts	0x0131, r24

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	80 93 32 01 	sts	0x0132, r24
    1a4a:	08 95       	ret

00001a4c <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    1a4c:	90 91 f3 02 	lds	r25, 0x02F3
    1a50:	80 91 f2 02 	lds	r24, 0x02F2
    1a54:	98 17       	cp	r25, r24
    1a56:	91 f0       	breq	.+36     	; 0x1a7c <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    1a58:	e0 91 f2 02 	lds	r30, 0x02F2
    1a5c:	ef 5f       	subi	r30, 0xFF	; 255
    1a5e:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    1a60:	e0 93 f2 02 	sts	0x02F2, r30

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	ea 50       	subi	r30, 0x0A	; 10
    1a68:	fd 4f       	sbci	r31, 0xFD	; 253
    1a6a:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    1a6c:	80 91 f1 02 	lds	r24, 0x02F1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	98 2f       	mov	r25, r24
    1a74:	88 27       	eor	r24, r24
    1a76:	82 0f       	add	r24, r18
    1a78:	91 1d       	adc	r25, r1
    1a7a:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    1a80:	08 95       	ret

00001a82 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    1a82:	20 91 f5 02 	lds	r18, 0x02F5
    1a86:	2f 5f       	subi	r18, 0xFF	; 255
    1a88:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    1a8a:	90 91 f4 02 	lds	r25, 0x02F4
    1a8e:	29 17       	cp	r18, r25
    1a90:	e1 f3       	breq	.-8      	; 0x1a8a <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    1a92:	e2 2f       	mov	r30, r18
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	ea 5e       	subi	r30, 0xEA	; 234
    1a98:	fc 4f       	sbci	r31, 0xFC	; 252
    1a9a:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    1a9c:	20 93 f5 02 	sts	0x02F5, r18

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    1aa0:	e1 e3       	ldi	r30, 0x31	; 49
    1aa2:	f1 e0       	ldi	r31, 0x01	; 1
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 62       	ori	r24, 0x20	; 32
    1aa8:	80 83       	st	Z, r24
    1aaa:	08 95       	ret

00001aac <__subsf3>:
    1aac:	50 58       	subi	r21, 0x80	; 128

00001aae <__addsf3>:
    1aae:	bb 27       	eor	r27, r27
    1ab0:	aa 27       	eor	r26, r26
    1ab2:	0e d0       	rcall	.+28     	; 0x1ad0 <__addsf3x>
    1ab4:	75 c1       	rjmp	.+746    	; 0x1da0 <__fp_round>
    1ab6:	66 d1       	rcall	.+716    	; 0x1d84 <__fp_pscA>
    1ab8:	30 f0       	brcs	.+12     	; 0x1ac6 <__addsf3+0x18>
    1aba:	6b d1       	rcall	.+726    	; 0x1d92 <__fp_pscB>
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <__addsf3+0x18>
    1abe:	31 f4       	brne	.+12     	; 0x1acc <__addsf3+0x1e>
    1ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <__addsf3+0x1a>
    1ac4:	1e f4       	brtc	.+6      	; 0x1acc <__addsf3+0x1e>
    1ac6:	5b c1       	rjmp	.+694    	; 0x1d7e <__fp_nan>
    1ac8:	0e f4       	brtc	.+2      	; 0x1acc <__addsf3+0x1e>
    1aca:	e0 95       	com	r30
    1acc:	e7 fb       	bst	r30, 7
    1ace:	51 c1       	rjmp	.+674    	; 0x1d72 <__fp_inf>

00001ad0 <__addsf3x>:
    1ad0:	e9 2f       	mov	r30, r25
    1ad2:	77 d1       	rcall	.+750    	; 0x1dc2 <__fp_split3>
    1ad4:	80 f3       	brcs	.-32     	; 0x1ab6 <__addsf3+0x8>
    1ad6:	ba 17       	cp	r27, r26
    1ad8:	62 07       	cpc	r22, r18
    1ada:	73 07       	cpc	r23, r19
    1adc:	84 07       	cpc	r24, r20
    1ade:	95 07       	cpc	r25, r21
    1ae0:	18 f0       	brcs	.+6      	; 0x1ae8 <__addsf3x+0x18>
    1ae2:	71 f4       	brne	.+28     	; 0x1b00 <__addsf3x+0x30>
    1ae4:	9e f5       	brtc	.+102    	; 0x1b4c <__addsf3x+0x7c>
    1ae6:	8f c1       	rjmp	.+798    	; 0x1e06 <__fp_zero>
    1ae8:	0e f4       	brtc	.+2      	; 0x1aec <__addsf3x+0x1c>
    1aea:	e0 95       	com	r30
    1aec:	0b 2e       	mov	r0, r27
    1aee:	ba 2f       	mov	r27, r26
    1af0:	a0 2d       	mov	r26, r0
    1af2:	0b 01       	movw	r0, r22
    1af4:	b9 01       	movw	r22, r18
    1af6:	90 01       	movw	r18, r0
    1af8:	0c 01       	movw	r0, r24
    1afa:	ca 01       	movw	r24, r20
    1afc:	a0 01       	movw	r20, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	ff 27       	eor	r31, r31
    1b02:	59 1b       	sub	r21, r25
    1b04:	99 f0       	breq	.+38     	; 0x1b2c <__addsf3x+0x5c>
    1b06:	59 3f       	cpi	r21, 0xF9	; 249
    1b08:	50 f4       	brcc	.+20     	; 0x1b1e <__addsf3x+0x4e>
    1b0a:	50 3e       	cpi	r21, 0xE0	; 224
    1b0c:	68 f1       	brcs	.+90     	; 0x1b68 <__addsf3x+0x98>
    1b0e:	1a 16       	cp	r1, r26
    1b10:	f0 40       	sbci	r31, 0x00	; 0
    1b12:	a2 2f       	mov	r26, r18
    1b14:	23 2f       	mov	r18, r19
    1b16:	34 2f       	mov	r19, r20
    1b18:	44 27       	eor	r20, r20
    1b1a:	58 5f       	subi	r21, 0xF8	; 248
    1b1c:	f3 cf       	rjmp	.-26     	; 0x1b04 <__addsf3x+0x34>
    1b1e:	46 95       	lsr	r20
    1b20:	37 95       	ror	r19
    1b22:	27 95       	ror	r18
    1b24:	a7 95       	ror	r26
    1b26:	f0 40       	sbci	r31, 0x00	; 0
    1b28:	53 95       	inc	r21
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <__addsf3x+0x4e>
    1b2c:	7e f4       	brtc	.+30     	; 0x1b4c <__addsf3x+0x7c>
    1b2e:	1f 16       	cp	r1, r31
    1b30:	ba 0b       	sbc	r27, r26
    1b32:	62 0b       	sbc	r22, r18
    1b34:	73 0b       	sbc	r23, r19
    1b36:	84 0b       	sbc	r24, r20
    1b38:	ba f0       	brmi	.+46     	; 0x1b68 <__addsf3x+0x98>
    1b3a:	91 50       	subi	r25, 0x01	; 1
    1b3c:	a1 f0       	breq	.+40     	; 0x1b66 <__addsf3x+0x96>
    1b3e:	ff 0f       	add	r31, r31
    1b40:	bb 1f       	adc	r27, r27
    1b42:	66 1f       	adc	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	c2 f7       	brpl	.-16     	; 0x1b3a <__addsf3x+0x6a>
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <__addsf3x+0x98>
    1b4c:	ba 0f       	add	r27, r26
    1b4e:	62 1f       	adc	r22, r18
    1b50:	73 1f       	adc	r23, r19
    1b52:	84 1f       	adc	r24, r20
    1b54:	48 f4       	brcc	.+18     	; 0x1b68 <__addsf3x+0x98>
    1b56:	87 95       	ror	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b7 95       	ror	r27
    1b5e:	f7 95       	ror	r31
    1b60:	9e 3f       	cpi	r25, 0xFE	; 254
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <__addsf3x+0x96>
    1b64:	b3 cf       	rjmp	.-154    	; 0x1acc <__addsf3+0x1e>
    1b66:	93 95       	inc	r25
    1b68:	88 0f       	add	r24, r24
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <__addsf3x+0x9e>
    1b6c:	99 27       	eor	r25, r25
    1b6e:	ee 0f       	add	r30, r30
    1b70:	97 95       	ror	r25
    1b72:	87 95       	ror	r24
    1b74:	08 95       	ret

00001b76 <__cmpsf2>:
    1b76:	d9 d0       	rcall	.+434    	; 0x1d2a <__fp_cmp>
    1b78:	08 f4       	brcc	.+2      	; 0x1b7c <__cmpsf2+0x6>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	08 95       	ret

00001b7e <__divsf3>:
    1b7e:	0c d0       	rcall	.+24     	; 0x1b98 <__divsf3x>
    1b80:	0f c1       	rjmp	.+542    	; 0x1da0 <__fp_round>
    1b82:	07 d1       	rcall	.+526    	; 0x1d92 <__fp_pscB>
    1b84:	40 f0       	brcs	.+16     	; 0x1b96 <__divsf3+0x18>
    1b86:	fe d0       	rcall	.+508    	; 0x1d84 <__fp_pscA>
    1b88:	30 f0       	brcs	.+12     	; 0x1b96 <__divsf3+0x18>
    1b8a:	21 f4       	brne	.+8      	; 0x1b94 <__divsf3+0x16>
    1b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <__divsf3+0x18>
    1b90:	f0 c0       	rjmp	.+480    	; 0x1d72 <__fp_inf>
    1b92:	51 11       	cpse	r21, r1
    1b94:	39 c1       	rjmp	.+626    	; 0x1e08 <__fp_szero>
    1b96:	f3 c0       	rjmp	.+486    	; 0x1d7e <__fp_nan>

00001b98 <__divsf3x>:
    1b98:	14 d1       	rcall	.+552    	; 0x1dc2 <__fp_split3>
    1b9a:	98 f3       	brcs	.-26     	; 0x1b82 <__divsf3+0x4>

00001b9c <__divsf3_pse>:
    1b9c:	99 23       	and	r25, r25
    1b9e:	c9 f3       	breq	.-14     	; 0x1b92 <__divsf3+0x14>
    1ba0:	55 23       	and	r21, r21
    1ba2:	b1 f3       	breq	.-20     	; 0x1b90 <__divsf3+0x12>
    1ba4:	95 1b       	sub	r25, r21
    1ba6:	55 0b       	sbc	r21, r21
    1ba8:	bb 27       	eor	r27, r27
    1baa:	aa 27       	eor	r26, r26
    1bac:	62 17       	cp	r22, r18
    1bae:	73 07       	cpc	r23, r19
    1bb0:	84 07       	cpc	r24, r20
    1bb2:	38 f0       	brcs	.+14     	; 0x1bc2 <__divsf3_pse+0x26>
    1bb4:	9f 5f       	subi	r25, 0xFF	; 255
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	44 1f       	adc	r20, r20
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	a9 f3       	breq	.-22     	; 0x1bac <__divsf3_pse+0x10>
    1bc2:	33 d0       	rcall	.+102    	; 0x1c2a <__divsf3_pse+0x8e>
    1bc4:	0e 2e       	mov	r0, r30
    1bc6:	3a f0       	brmi	.+14     	; 0x1bd6 <__divsf3_pse+0x3a>
    1bc8:	e0 e8       	ldi	r30, 0x80	; 128
    1bca:	30 d0       	rcall	.+96     	; 0x1c2c <__divsf3_pse+0x90>
    1bcc:	91 50       	subi	r25, 0x01	; 1
    1bce:	50 40       	sbci	r21, 0x00	; 0
    1bd0:	e6 95       	lsr	r30
    1bd2:	00 1c       	adc	r0, r0
    1bd4:	ca f7       	brpl	.-14     	; 0x1bc8 <__divsf3_pse+0x2c>
    1bd6:	29 d0       	rcall	.+82     	; 0x1c2a <__divsf3_pse+0x8e>
    1bd8:	fe 2f       	mov	r31, r30
    1bda:	27 d0       	rcall	.+78     	; 0x1c2a <__divsf3_pse+0x8e>
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	bb 1f       	adc	r27, r27
    1be4:	26 17       	cp	r18, r22
    1be6:	37 07       	cpc	r19, r23
    1be8:	48 07       	cpc	r20, r24
    1bea:	ab 07       	cpc	r26, r27
    1bec:	b0 e8       	ldi	r27, 0x80	; 128
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <__divsf3_pse+0x56>
    1bf0:	bb 0b       	sbc	r27, r27
    1bf2:	80 2d       	mov	r24, r0
    1bf4:	bf 01       	movw	r22, r30
    1bf6:	ff 27       	eor	r31, r31
    1bf8:	93 58       	subi	r25, 0x83	; 131
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	2a f0       	brmi	.+10     	; 0x1c08 <__divsf3_pse+0x6c>
    1bfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1c00:	51 05       	cpc	r21, r1
    1c02:	68 f0       	brcs	.+26     	; 0x1c1e <__divsf3_pse+0x82>
    1c04:	b6 c0       	rjmp	.+364    	; 0x1d72 <__fp_inf>
    1c06:	00 c1       	rjmp	.+512    	; 0x1e08 <__fp_szero>
    1c08:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0a:	ec f3       	brlt	.-6      	; 0x1c06 <__divsf3_pse+0x6a>
    1c0c:	98 3e       	cpi	r25, 0xE8	; 232
    1c0e:	dc f3       	brlt	.-10     	; 0x1c06 <__divsf3_pse+0x6a>
    1c10:	86 95       	lsr	r24
    1c12:	77 95       	ror	r23
    1c14:	67 95       	ror	r22
    1c16:	b7 95       	ror	r27
    1c18:	f7 95       	ror	r31
    1c1a:	9f 5f       	subi	r25, 0xFF	; 255
    1c1c:	c9 f7       	brne	.-14     	; 0x1c10 <__divsf3_pse+0x74>
    1c1e:	88 0f       	add	r24, r24
    1c20:	91 1d       	adc	r25, r1
    1c22:	96 95       	lsr	r25
    1c24:	87 95       	ror	r24
    1c26:	97 f9       	bld	r25, 7
    1c28:	08 95       	ret
    1c2a:	e1 e0       	ldi	r30, 0x01	; 1
    1c2c:	66 0f       	add	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	bb 1f       	adc	r27, r27
    1c34:	62 17       	cp	r22, r18
    1c36:	73 07       	cpc	r23, r19
    1c38:	84 07       	cpc	r24, r20
    1c3a:	ba 07       	cpc	r27, r26
    1c3c:	20 f0       	brcs	.+8      	; 0x1c46 <__divsf3_pse+0xaa>
    1c3e:	62 1b       	sub	r22, r18
    1c40:	73 0b       	sbc	r23, r19
    1c42:	84 0b       	sbc	r24, r20
    1c44:	ba 0b       	sbc	r27, r26
    1c46:	ee 1f       	adc	r30, r30
    1c48:	88 f7       	brcc	.-30     	; 0x1c2c <__divsf3_pse+0x90>
    1c4a:	e0 95       	com	r30
    1c4c:	08 95       	ret

00001c4e <__fixsfsi>:
    1c4e:	04 d0       	rcall	.+8      	; 0x1c58 <__fixunssfsi>
    1c50:	68 94       	set
    1c52:	b1 11       	cpse	r27, r1
    1c54:	d9 c0       	rjmp	.+434    	; 0x1e08 <__fp_szero>
    1c56:	08 95       	ret

00001c58 <__fixunssfsi>:
    1c58:	bc d0       	rcall	.+376    	; 0x1dd2 <__fp_splitA>
    1c5a:	88 f0       	brcs	.+34     	; 0x1c7e <__fixunssfsi+0x26>
    1c5c:	9f 57       	subi	r25, 0x7F	; 127
    1c5e:	90 f0       	brcs	.+36     	; 0x1c84 <__fixunssfsi+0x2c>
    1c60:	b9 2f       	mov	r27, r25
    1c62:	99 27       	eor	r25, r25
    1c64:	b7 51       	subi	r27, 0x17	; 23
    1c66:	a0 f0       	brcs	.+40     	; 0x1c90 <__fixunssfsi+0x38>
    1c68:	d1 f0       	breq	.+52     	; 0x1c9e <__fixunssfsi+0x46>
    1c6a:	66 0f       	add	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	1a f0       	brmi	.+6      	; 0x1c7a <__fixunssfsi+0x22>
    1c74:	ba 95       	dec	r27
    1c76:	c9 f7       	brne	.-14     	; 0x1c6a <__fixunssfsi+0x12>
    1c78:	12 c0       	rjmp	.+36     	; 0x1c9e <__fixunssfsi+0x46>
    1c7a:	b1 30       	cpi	r27, 0x01	; 1
    1c7c:	81 f0       	breq	.+32     	; 0x1c9e <__fixunssfsi+0x46>
    1c7e:	c3 d0       	rcall	.+390    	; 0x1e06 <__fp_zero>
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	08 95       	ret
    1c84:	c0 c0       	rjmp	.+384    	; 0x1e06 <__fp_zero>
    1c86:	67 2f       	mov	r22, r23
    1c88:	78 2f       	mov	r23, r24
    1c8a:	88 27       	eor	r24, r24
    1c8c:	b8 5f       	subi	r27, 0xF8	; 248
    1c8e:	39 f0       	breq	.+14     	; 0x1c9e <__fixunssfsi+0x46>
    1c90:	b9 3f       	cpi	r27, 0xF9	; 249
    1c92:	cc f3       	brlt	.-14     	; 0x1c86 <__fixunssfsi+0x2e>
    1c94:	86 95       	lsr	r24
    1c96:	77 95       	ror	r23
    1c98:	67 95       	ror	r22
    1c9a:	b3 95       	inc	r27
    1c9c:	d9 f7       	brne	.-10     	; 0x1c94 <__fixunssfsi+0x3c>
    1c9e:	3e f4       	brtc	.+14     	; 0x1cae <__fixunssfsi+0x56>
    1ca0:	90 95       	com	r25
    1ca2:	80 95       	com	r24
    1ca4:	70 95       	com	r23
    1ca6:	61 95       	neg	r22
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	08 95       	ret

00001cb0 <__floatunsisf>:
    1cb0:	e8 94       	clt
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <__floatsisf+0x12>

00001cb4 <__floatsisf>:
    1cb4:	97 fb       	bst	r25, 7
    1cb6:	3e f4       	brtc	.+14     	; 0x1cc6 <__floatsisf+0x12>
    1cb8:	90 95       	com	r25
    1cba:	80 95       	com	r24
    1cbc:	70 95       	com	r23
    1cbe:	61 95       	neg	r22
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	99 23       	and	r25, r25
    1cc8:	a9 f0       	breq	.+42     	; 0x1cf4 <__floatsisf+0x40>
    1cca:	f9 2f       	mov	r31, r25
    1ccc:	96 e9       	ldi	r25, 0x96	; 150
    1cce:	bb 27       	eor	r27, r27
    1cd0:	93 95       	inc	r25
    1cd2:	f6 95       	lsr	r31
    1cd4:	87 95       	ror	r24
    1cd6:	77 95       	ror	r23
    1cd8:	67 95       	ror	r22
    1cda:	b7 95       	ror	r27
    1cdc:	f1 11       	cpse	r31, r1
    1cde:	f8 cf       	rjmp	.-16     	; 0x1cd0 <__floatsisf+0x1c>
    1ce0:	fa f4       	brpl	.+62     	; 0x1d20 <__floatsisf+0x6c>
    1ce2:	bb 0f       	add	r27, r27
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <__floatsisf+0x36>
    1ce6:	60 ff       	sbrs	r22, 0
    1ce8:	1b c0       	rjmp	.+54     	; 0x1d20 <__floatsisf+0x6c>
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	16 c0       	rjmp	.+44     	; 0x1d20 <__floatsisf+0x6c>
    1cf4:	88 23       	and	r24, r24
    1cf6:	11 f0       	breq	.+4      	; 0x1cfc <__floatsisf+0x48>
    1cf8:	96 e9       	ldi	r25, 0x96	; 150
    1cfa:	11 c0       	rjmp	.+34     	; 0x1d1e <__floatsisf+0x6a>
    1cfc:	77 23       	and	r23, r23
    1cfe:	21 f0       	breq	.+8      	; 0x1d08 <__floatsisf+0x54>
    1d00:	9e e8       	ldi	r25, 0x8E	; 142
    1d02:	87 2f       	mov	r24, r23
    1d04:	76 2f       	mov	r23, r22
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <__floatsisf+0x5e>
    1d08:	66 23       	and	r22, r22
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <__floatsisf+0x74>
    1d0c:	96 e8       	ldi	r25, 0x86	; 134
    1d0e:	86 2f       	mov	r24, r22
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	2a f0       	brmi	.+10     	; 0x1d20 <__floatsisf+0x6c>
    1d16:	9a 95       	dec	r25
    1d18:	66 0f       	add	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	da f7       	brpl	.-10     	; 0x1d16 <__floatsisf+0x62>
    1d20:	88 0f       	add	r24, r24
    1d22:	96 95       	lsr	r25
    1d24:	87 95       	ror	r24
    1d26:	97 f9       	bld	r25, 7
    1d28:	08 95       	ret

00001d2a <__fp_cmp>:
    1d2a:	99 0f       	add	r25, r25
    1d2c:	00 08       	sbc	r0, r0
    1d2e:	55 0f       	add	r21, r21
    1d30:	aa 0b       	sbc	r26, r26
    1d32:	e0 e8       	ldi	r30, 0x80	; 128
    1d34:	fe ef       	ldi	r31, 0xFE	; 254
    1d36:	16 16       	cp	r1, r22
    1d38:	17 06       	cpc	r1, r23
    1d3a:	e8 07       	cpc	r30, r24
    1d3c:	f9 07       	cpc	r31, r25
    1d3e:	c0 f0       	brcs	.+48     	; 0x1d70 <__fp_cmp+0x46>
    1d40:	12 16       	cp	r1, r18
    1d42:	13 06       	cpc	r1, r19
    1d44:	e4 07       	cpc	r30, r20
    1d46:	f5 07       	cpc	r31, r21
    1d48:	98 f0       	brcs	.+38     	; 0x1d70 <__fp_cmp+0x46>
    1d4a:	62 1b       	sub	r22, r18
    1d4c:	73 0b       	sbc	r23, r19
    1d4e:	84 0b       	sbc	r24, r20
    1d50:	95 0b       	sbc	r25, r21
    1d52:	39 f4       	brne	.+14     	; 0x1d62 <__fp_cmp+0x38>
    1d54:	0a 26       	eor	r0, r26
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <__fp_cmp+0x46>
    1d58:	23 2b       	or	r18, r19
    1d5a:	24 2b       	or	r18, r20
    1d5c:	25 2b       	or	r18, r21
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <__fp_cmp+0x3e>
    1d60:	08 95       	ret
    1d62:	0a 26       	eor	r0, r26
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <__fp_cmp+0x3e>
    1d66:	a1 40       	sbci	r26, 0x01	; 1
    1d68:	a6 95       	lsr	r26
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	81 1d       	adc	r24, r1
    1d6e:	81 1d       	adc	r24, r1
    1d70:	08 95       	ret

00001d72 <__fp_inf>:
    1d72:	97 f9       	bld	r25, 7
    1d74:	9f 67       	ori	r25, 0x7F	; 127
    1d76:	80 e8       	ldi	r24, 0x80	; 128
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	08 95       	ret

00001d7e <__fp_nan>:
    1d7e:	9f ef       	ldi	r25, 0xFF	; 255
    1d80:	80 ec       	ldi	r24, 0xC0	; 192
    1d82:	08 95       	ret

00001d84 <__fp_pscA>:
    1d84:	00 24       	eor	r0, r0
    1d86:	0a 94       	dec	r0
    1d88:	16 16       	cp	r1, r22
    1d8a:	17 06       	cpc	r1, r23
    1d8c:	18 06       	cpc	r1, r24
    1d8e:	09 06       	cpc	r0, r25
    1d90:	08 95       	ret

00001d92 <__fp_pscB>:
    1d92:	00 24       	eor	r0, r0
    1d94:	0a 94       	dec	r0
    1d96:	12 16       	cp	r1, r18
    1d98:	13 06       	cpc	r1, r19
    1d9a:	14 06       	cpc	r1, r20
    1d9c:	05 06       	cpc	r0, r21
    1d9e:	08 95       	ret

00001da0 <__fp_round>:
    1da0:	09 2e       	mov	r0, r25
    1da2:	03 94       	inc	r0
    1da4:	00 0c       	add	r0, r0
    1da6:	11 f4       	brne	.+4      	; 0x1dac <__fp_round+0xc>
    1da8:	88 23       	and	r24, r24
    1daa:	52 f0       	brmi	.+20     	; 0x1dc0 <__fp_round+0x20>
    1dac:	bb 0f       	add	r27, r27
    1dae:	40 f4       	brcc	.+16     	; 0x1dc0 <__fp_round+0x20>
    1db0:	bf 2b       	or	r27, r31
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <__fp_round+0x18>
    1db4:	60 ff       	sbrs	r22, 0
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <__fp_round+0x20>
    1db8:	6f 5f       	subi	r22, 0xFF	; 255
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	08 95       	ret

00001dc2 <__fp_split3>:
    1dc2:	57 fd       	sbrc	r21, 7
    1dc4:	90 58       	subi	r25, 0x80	; 128
    1dc6:	44 0f       	add	r20, r20
    1dc8:	55 1f       	adc	r21, r21
    1dca:	59 f0       	breq	.+22     	; 0x1de2 <__fp_splitA+0x10>
    1dcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dce:	71 f0       	breq	.+28     	; 0x1dec <__fp_splitA+0x1a>
    1dd0:	47 95       	ror	r20

00001dd2 <__fp_splitA>:
    1dd2:	88 0f       	add	r24, r24
    1dd4:	97 fb       	bst	r25, 7
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	61 f0       	breq	.+24     	; 0x1df2 <__fp_splitA+0x20>
    1dda:	9f 3f       	cpi	r25, 0xFF	; 255
    1ddc:	79 f0       	breq	.+30     	; 0x1dfc <__fp_splitA+0x2a>
    1dde:	87 95       	ror	r24
    1de0:	08 95       	ret
    1de2:	12 16       	cp	r1, r18
    1de4:	13 06       	cpc	r1, r19
    1de6:	14 06       	cpc	r1, r20
    1de8:	55 1f       	adc	r21, r21
    1dea:	f2 cf       	rjmp	.-28     	; 0x1dd0 <__fp_split3+0xe>
    1dec:	46 95       	lsr	r20
    1dee:	f1 df       	rcall	.-30     	; 0x1dd2 <__fp_splitA>
    1df0:	08 c0       	rjmp	.+16     	; 0x1e02 <__fp_splitA+0x30>
    1df2:	16 16       	cp	r1, r22
    1df4:	17 06       	cpc	r1, r23
    1df6:	18 06       	cpc	r1, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	f1 cf       	rjmp	.-30     	; 0x1dde <__fp_splitA+0xc>
    1dfc:	86 95       	lsr	r24
    1dfe:	71 05       	cpc	r23, r1
    1e00:	61 05       	cpc	r22, r1
    1e02:	08 94       	sec
    1e04:	08 95       	ret

00001e06 <__fp_zero>:
    1e06:	e8 94       	clt

00001e08 <__fp_szero>:
    1e08:	bb 27       	eor	r27, r27
    1e0a:	66 27       	eor	r22, r22
    1e0c:	77 27       	eor	r23, r23
    1e0e:	cb 01       	movw	r24, r22
    1e10:	97 f9       	bld	r25, 7
    1e12:	08 95       	ret

00001e14 <__gesf2>:
    1e14:	8a df       	rcall	.-236    	; 0x1d2a <__fp_cmp>
    1e16:	08 f4       	brcc	.+2      	; 0x1e1a <__gesf2+0x6>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	08 95       	ret

00001e1c <__mulsf3>:
    1e1c:	0b d0       	rcall	.+22     	; 0x1e34 <__mulsf3x>
    1e1e:	c0 cf       	rjmp	.-128    	; 0x1da0 <__fp_round>
    1e20:	b1 df       	rcall	.-158    	; 0x1d84 <__fp_pscA>
    1e22:	28 f0       	brcs	.+10     	; 0x1e2e <__mulsf3+0x12>
    1e24:	b6 df       	rcall	.-148    	; 0x1d92 <__fp_pscB>
    1e26:	18 f0       	brcs	.+6      	; 0x1e2e <__mulsf3+0x12>
    1e28:	95 23       	and	r25, r21
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <__mulsf3+0x12>
    1e2c:	a2 cf       	rjmp	.-188    	; 0x1d72 <__fp_inf>
    1e2e:	a7 cf       	rjmp	.-178    	; 0x1d7e <__fp_nan>
    1e30:	11 24       	eor	r1, r1
    1e32:	ea cf       	rjmp	.-44     	; 0x1e08 <__fp_szero>

00001e34 <__mulsf3x>:
    1e34:	c6 df       	rcall	.-116    	; 0x1dc2 <__fp_split3>
    1e36:	a0 f3       	brcs	.-24     	; 0x1e20 <__mulsf3+0x4>

00001e38 <__mulsf3_pse>:
    1e38:	95 9f       	mul	r25, r21
    1e3a:	d1 f3       	breq	.-12     	; 0x1e30 <__mulsf3+0x14>
    1e3c:	95 0f       	add	r25, r21
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	55 1f       	adc	r21, r21
    1e42:	62 9f       	mul	r22, r18
    1e44:	f0 01       	movw	r30, r0
    1e46:	72 9f       	mul	r23, r18
    1e48:	bb 27       	eor	r27, r27
    1e4a:	f0 0d       	add	r31, r0
    1e4c:	b1 1d       	adc	r27, r1
    1e4e:	63 9f       	mul	r22, r19
    1e50:	aa 27       	eor	r26, r26
    1e52:	f0 0d       	add	r31, r0
    1e54:	b1 1d       	adc	r27, r1
    1e56:	aa 1f       	adc	r26, r26
    1e58:	64 9f       	mul	r22, r20
    1e5a:	66 27       	eor	r22, r22
    1e5c:	b0 0d       	add	r27, r0
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	66 1f       	adc	r22, r22
    1e62:	82 9f       	mul	r24, r18
    1e64:	22 27       	eor	r18, r18
    1e66:	b0 0d       	add	r27, r0
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	62 1f       	adc	r22, r18
    1e6c:	73 9f       	mul	r23, r19
    1e6e:	b0 0d       	add	r27, r0
    1e70:	a1 1d       	adc	r26, r1
    1e72:	62 1f       	adc	r22, r18
    1e74:	83 9f       	mul	r24, r19
    1e76:	a0 0d       	add	r26, r0
    1e78:	61 1d       	adc	r22, r1
    1e7a:	22 1f       	adc	r18, r18
    1e7c:	74 9f       	mul	r23, r20
    1e7e:	33 27       	eor	r19, r19
    1e80:	a0 0d       	add	r26, r0
    1e82:	61 1d       	adc	r22, r1
    1e84:	23 1f       	adc	r18, r19
    1e86:	84 9f       	mul	r24, r20
    1e88:	60 0d       	add	r22, r0
    1e8a:	21 1d       	adc	r18, r1
    1e8c:	82 2f       	mov	r24, r18
    1e8e:	76 2f       	mov	r23, r22
    1e90:	6a 2f       	mov	r22, r26
    1e92:	11 24       	eor	r1, r1
    1e94:	9f 57       	subi	r25, 0x7F	; 127
    1e96:	50 40       	sbci	r21, 0x00	; 0
    1e98:	8a f0       	brmi	.+34     	; 0x1ebc <__mulsf3_pse+0x84>
    1e9a:	e1 f0       	breq	.+56     	; 0x1ed4 <__mulsf3_pse+0x9c>
    1e9c:	88 23       	and	r24, r24
    1e9e:	4a f0       	brmi	.+18     	; 0x1eb2 <__mulsf3_pse+0x7a>
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	66 1f       	adc	r22, r22
    1ea8:	77 1f       	adc	r23, r23
    1eaa:	88 1f       	adc	r24, r24
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	50 40       	sbci	r21, 0x00	; 0
    1eb0:	a9 f7       	brne	.-22     	; 0x1e9c <__mulsf3_pse+0x64>
    1eb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	70 f0       	brcs	.+28     	; 0x1ed4 <__mulsf3_pse+0x9c>
    1eb8:	5c cf       	rjmp	.-328    	; 0x1d72 <__fp_inf>
    1eba:	a6 cf       	rjmp	.-180    	; 0x1e08 <__fp_szero>
    1ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ebe:	ec f3       	brlt	.-6      	; 0x1eba <__mulsf3_pse+0x82>
    1ec0:	98 3e       	cpi	r25, 0xE8	; 232
    1ec2:	dc f3       	brlt	.-10     	; 0x1eba <__mulsf3_pse+0x82>
    1ec4:	86 95       	lsr	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	b7 95       	ror	r27
    1ecc:	f7 95       	ror	r31
    1ece:	e7 95       	ror	r30
    1ed0:	9f 5f       	subi	r25, 0xFF	; 255
    1ed2:	c1 f7       	brne	.-16     	; 0x1ec4 <__mulsf3_pse+0x8c>
    1ed4:	fe 2b       	or	r31, r30
    1ed6:	88 0f       	add	r24, r24
    1ed8:	91 1d       	adc	r25, r1
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	97 f9       	bld	r25, 7
    1ee0:	08 95       	ret

00001ee2 <__tablejump2__>:
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	88 1f       	adc	r24, r24
    1ee8:	8b bf       	out	0x3b, r24	; 59
    1eea:	07 90       	elpm	r0, Z+
    1eec:	f6 91       	elpm	r31, Z
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	19 94       	eijmp

00001ef2 <_exit>:
    1ef2:	f8 94       	cli

00001ef4 <__stop_program>:
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <__stop_program>
